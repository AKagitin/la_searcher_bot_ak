[
    {
        "path": "src/_dependencies/cloud_func_parallel_guard.py",
        "line": 10,
        "func_name": "check_if_other_functions_are_working",
        "type_comments": [
            "(str, int) -> bool"
        ],
        "samples": 5
    },
    {
        "path": "src/_dependencies/cloud_func_parallel_guard.py",
        "line": 35,
        "func_name": "record_start_of_function",
        "type_comments": [
            "(int, int, int, str) -> None"
        ],
        "samples": 5
    },
    {
        "path": "src/_dependencies/cloud_func_parallel_guard.py",
        "line": 55,
        "func_name": "record_finish_of_function",
        "type_comments": [
            "(int, List) -> None"
        ],
        "samples": 2
    },
    {
        "path": "src/_dependencies/cloud_func_parallel_guard.py",
        "line": 75,
        "func_name": "check_and_save_event_id",
        "type_comments": [
            "(str, str, int, None, int, str, int) -> bool",
            "(test_db_guard.Context, str, int, None, int, str, int) -> bool"
        ],
        "samples": 5
    },
    {
        "path": "src/_dependencies/commons.py",
        "line": 34,
        "func_name": "get_project_id",
        "type_comments": [
            "() -> unittest.mock.MagicMock"
        ],
        "samples": 1
    },
    {
        "path": "src/_dependencies/commons.py",
        "line": 63,
        "func_name": "get_publisher",
        "type_comments": [
            "() -> unittest.mock.MagicMock"
        ],
        "samples": 1
    },
    {
        "path": "src/_dependencies/commons.py",
        "line": 68,
        "func_name": "publish_to_pubsub",
        "type_comments": [
            "(_dependencies.commons.Topics, str) -> None",
            "(str, str) -> None"
        ],
        "samples": 5
    },
    {
        "path": "src/_dependencies/commons.py",
        "line": 111,
        "func_name": "get_app_config",
        "type_comments": [
            "() -> tests.common.AppTestConfig"
        ],
        "samples": 1
    },
    {
        "path": "src/_dependencies/commons.py",
        "line": 136,
        "func_name": "sql_connect_by_psycopg2",
        "type_comments": [
            "() -> psycopg2.extensions.connection"
        ],
        "samples": 6
    },
    {
        "path": "src/_dependencies/commons.py",
        "line": 153,
        "func_name": "sqlalchemy_get_pool",
        "type_comments": [
            "(int, int) -> sqlalchemy.engine.base.Engine"
        ],
        "samples": 5
    },
    {
        "path": "src/_dependencies/content.py",
        "line": 7,
        "func_name": "clean_up_content",
        "type_comments": [
            "(str) -> str"
        ],
        "samples": 1
    },
    {
        "path": "src/_dependencies/content.py",
        "line": 22,
        "func_name": "clean_up_content_2",
        "type_comments": [
            "(str) -> List[str]"
        ],
        "samples": 1
    },
    {
        "path": "src/_dependencies/content.py",
        "line": 59,
        "func_name": "_cook_soup",
        "type_comments": [
            "(str) -> bs4.BeautifulSoup"
        ],
        "samples": 2
    },
    {
        "path": "src/_dependencies/content.py",
        "line": 65,
        "func_name": "_remove_irrelevant_content",
        "type_comments": [
            "(str) -> str"
        ],
        "samples": 1
    },
    {
        "path": "src/_dependencies/content.py",
        "line": 95,
        "func_name": "_make_html",
        "type_comments": [
            "(str) -> str"
        ],
        "samples": 1
    },
    {
        "path": "src/_dependencies/content.py",
        "line": 101,
        "func_name": "_delete_sorted_out_one_tag",
        "type_comments": [
            "(bs4.BeautifulSoup, bs4.element.Tag) -> bs4.BeautifulSoup"
        ],
        "samples": 1
    },
    {
        "path": "src/_dependencies/content.py",
        "line": 282,
        "func_name": "_delete_sorted_out_all_tags",
        "type_comments": [
            "(bs4.BeautifulSoup) -> bs4.BeautifulSoup"
        ],
        "samples": 1
    },
    {
        "path": "src/_dependencies/content.py",
        "line": 290,
        "func_name": "_remove_links",
        "type_comments": [
            "(bs4.BeautifulSoup) -> bs4.BeautifulSoup"
        ],
        "samples": 2
    },
    {
        "path": "src/_dependencies/content.py",
        "line": 298,
        "func_name": "_prettify_soup",
        "type_comments": [
            "(bs4.BeautifulSoup) -> bs4.BeautifulSoup"
        ],
        "samples": 2
    },
    {
        "path": "src/_dependencies/misc.py",
        "line": 21,
        "func_name": "notify_admin",
        "type_comments": [
            "(str) -> None"
        ],
        "samples": 5
    },
    {
        "path": "src/_dependencies/misc.py",
        "line": 27,
        "func_name": "make_api_call",
        "type_comments": [
            "(str, Set[str]) -> unittest.mock.MagicMock"
        ],
        "samples": 1
    },
    {
        "path": "src/_dependencies/misc.py",
        "line": 45,
        "func_name": "process_pubsub_message",
        "type_comments": [
            "(unittest.mock.MagicMock) -> pyannotate_runtime.collect_types.NoReturnType",
            "(unittest.mock.MagicMock) -> pyannotate_runtime.collect_types.NoReturnType",
            "(unittest.mock.MagicMock) -> pyannotate_runtime.collect_types.NoReturnType",
            "(Dict[str, bytes]) -> str",
            "(Dict[str, bytes]) -> Dict[str, Union[Dict[str, Union[int, str]], str]]"
        ],
        "samples": 5
    },
    {
        "path": "src/_dependencies/misc.py",
        "line": 60,
        "func_name": "process_pubsub_message_v2",
        "type_comments": [
            "(Dict[str, bytes]) -> str"
        ],
        "samples": 5
    },
    {
        "path": "src/_dependencies/misc.py",
        "line": 80,
        "func_name": "process_pubsub_message_v3",
        "type_comments": [
            "(Dict[str, bytes]) -> str",
            "(unittest.mock.MagicMock) -> pyannotate_runtime.collect_types.NoReturnType"
        ],
        "samples": 4
    },
    {
        "path": "src/_dependencies/misc.py",
        "line": 108,
        "func_name": "time_counter_since_search_start",
        "type_comments": [
            "(datetime.datetime) -> List[Union[int, str]]"
        ],
        "samples": 4
    },
    {
        "path": "src/_dependencies/misc.py",
        "line": 151,
        "func_name": "age_writer",
        "type_comments": [
            "(int) -> str"
        ],
        "samples": 4
    },
    {
        "path": "src/_dependencies/misc.py",
        "line": 170,
        "func_name": "send_message_async",
        "type_comments": [
            "(telegram.ext._callbackcontext.CallbackContext) -> None"
        ],
        "samples": 5
    },
    {
        "path": "src/_dependencies/misc.py",
        "line": 176,
        "func_name": "prepare_message_for_async",
        "type_comments": [
            "(int, Dict[str, str], str) -> pyannotate_runtime.collect_types.NoReturnType"
        ],
        "samples": 8
    },
    {
        "path": "src/_dependencies/misc.py",
        "line": 190,
        "func_name": "process_sending_message_async_other_bot",
        "type_comments": [
            "(int, Dict[str, str]) -> None"
        ],
        "samples": 5
    },
    {
        "path": "src/_dependencies/misc.py",
        "line": 195,
        "func_name": "process_sending_message_async",
        "type_comments": [
            "(int, Dict[str, Union[bool, str, telegram._replykeyboardmarkup.ReplyKeyboardMarkup]]) -> None",
            "(int, str) -> None"
        ],
        "samples": 4
    },
    {
        "path": "src/_dependencies/misc.py",
        "line": 201,
        "func_name": "generate_random_function_id",
        "type_comments": [
            "() -> int"
        ],
        "samples": 5
    },
    {
        "path": "src/_dependencies/misc.py",
        "line": 209,
        "func_name": "get_change_log_update_time",
        "type_comments": [
            "(psycopg2.extensions.cursor, int) -> datetime.datetime"
        ],
        "samples": 1
    },
    {
        "path": "src/_dependencies/misc.py",
        "line": 231,
        "func_name": "send_location_to_api",
        "type_comments": [
            "(unittest.mock.MagicMock, str, str, Dict[str, int]) -> unittest.mock.MagicMock"
        ],
        "samples": 1
    },
    {
        "path": "src/_dependencies/misc.py",
        "line": 260,
        "func_name": "save_sending_status_to_notif_by_user",
        "type_comments": [
            "(psycopg2.extensions.cursor, int, str) -> None"
        ],
        "samples": 1
    },
    {
        "path": "src/_dependencies/misc.py",
        "line": 280,
        "func_name": "evaluate_city_locations",
        "type_comments": [
            "(str) -> None",
            "(str) -> List[List[float]]"
        ],
        "samples": 5
    },
    {
        "path": "src/_dependencies/misc.py",
        "line": 309,
        "func_name": "get_triggering_function",
        "type_comments": [
            "(Dict[str, Union[int, str]]) -> int"
        ],
        "samples": 5
    },
    {
        "path": "src/_dependencies/misc.py",
        "line": 376,
        "func_name": "process_response",
        "type_comments": [
            "(unittest.mock.MagicMock, None) -> str",
            "(unittest.mock.MagicMock, None) -> str",
            "(unittest.mock.MagicMock, None) -> str"
        ],
        "samples": 3
    },
    {
        "path": "src/api_get_active_searches/main.py",
        "line": 18,
        "func_name": "get_list_of_allowed_apps",
        "type_comments": [
            "() -> List[int]"
        ],
        "samples": 3
    },
    {
        "path": "src/api_get_active_searches/main.py",
        "line": 34,
        "func_name": "get_list_of_active_searches_from_db",
        "type_comments": [
            "(Dict[str, Union[List[int], int]]) -> List",
            "(unittest.mock.MagicMock) -> List",
            "(Dict[str, int]) -> List"
        ],
        "samples": 3
    },
    {
        "path": "src/api_get_active_searches/main.py",
        "line": 168,
        "func_name": "save_user_statistics_to_db",
        "type_comments": [
            "(unittest.mock.MagicMock, Dict[str, Union[bool, str]]) -> None",
            "(Dict[str, int], Dict[str, Union[List, bool]]) -> None",
            "(unittest.mock.MagicMock, unittest.mock.MagicMock) -> None"
        ],
        "samples": 3
    },
    {
        "path": "src/api_get_active_searches/main.py",
        "line": 193,
        "func_name": "verify_json_validity",
        "type_comments": [
            "(unittest.mock.MagicMock, List[int]) -> str",
            "(Dict[str, int], List[int]) -> None",
            "(unittest.mock.MagicMock, unittest.mock.MagicMock) -> str"
        ],
        "samples": 3
    },
    {
        "path": "src/api_get_active_searches/main.py",
        "line": 212,
        "func_name": "main",
        "type_comments": [
            "(unittest.mock.MagicMock) -> Tuple[str, int, Dict[str, str]]",
            "(flask.wrappers.Request) -> Tuple[str, int, Dict[str, str]]"
        ],
        "samples": 2
    },
    {
        "path": "src/archive_notifications/main.py",
        "line": 13,
        "func_name": "sql_connect",
        "type_comments": [
            "() -> sqlalchemy.engine.base.Engine"
        ],
        "samples": 3
    },
    {
        "path": "src/archive_notifications/main.py",
        "line": 17,
        "func_name": "move_notifications_to_history_in_psql",
        "type_comments": [
            "(sqlalchemy.engine.base.Connection) -> str"
        ],
        "samples": 3
    },
    {
        "path": "src/archive_notifications/main.py",
        "line": 113,
        "func_name": "move_first_posts_to_history_in_psql",
        "type_comments": [
            "(sqlalchemy.engine.base.Connection) -> None"
        ],
        "samples": 3
    },
    {
        "path": "src/archive_notifications/main.py",
        "line": 211,
        "func_name": "main",
        "type_comments": [
            "(unittest.mock.MagicMock, unittest.mock.MagicMock) -> None",
            "(unittest.mock.MagicMock, str) -> None"
        ],
        "samples": 2
    },
    {
        "path": "src/archive_to_bigquery/main.py",
        "line": 12,
        "func_name": "sql_connect",
        "type_comments": [
            "() -> sqlalchemy.engine.base.Engine"
        ],
        "samples": 1
    },
    {
        "path": "src/archive_to_bigquery/main.py",
        "line": 16,
        "func_name": "archive_notif_by_user",
        "type_comments": [
            "(unittest.mock.MagicMock) -> None",
            "(unittest.mock.MagicMock) -> None"
        ],
        "samples": 2
    },
    {
        "path": "src/archive_to_bigquery/main.py",
        "line": 140,
        "func_name": "save_sql_stat_table_sizes",
        "type_comments": [
            "(unittest.mock.MagicMock) -> None",
            "(unittest.mock.MagicMock) -> None"
        ],
        "samples": 2
    },
    {
        "path": "src/archive_to_bigquery/main.py",
        "line": 179,
        "func_name": "main",
        "type_comments": [
            "(unittest.mock.MagicMock, unittest.mock.MagicMock) -> pyannotate_runtime.collect_types.NoReturnType",
            "(Dict[str, bytes], str) -> None"
        ],
        "samples": 2
    },
    {
        "path": "src/check_first_posts_for_changes/main.py",
        "line": 22,
        "func_name": "sql_connect",
        "type_comments": [
            "() -> sqlalchemy.engine.base.Engine"
        ],
        "samples": 4
    },
    {
        "path": "src/check_first_posts_for_changes/main.py",
        "line": 37,
        "func_name": "PercentGroup.__init__",
        "type_comments": [
            "(int, int, int, None, None, int, int, None) -> None"
        ],
        "samples": 5
    },
    {
        "path": "src/check_first_posts_for_changes/main.py",
        "line": 58,
        "func_name": "PercentGroup.__str__",
        "type_comments": [
            "() -> str"
        ],
        "samples": 2
    },
    {
        "path": "src/check_first_posts_for_changes/main.py",
        "line": 66,
        "func_name": "define_topic_visibility_by_content",
        "type_comments": [
            "(str) -> str"
        ],
        "samples": 3
    },
    {
        "path": "src/check_first_posts_for_changes/main.py",
        "line": 79,
        "func_name": "define_topic_visibility_by_topic_id",
        "type_comments": [
            "(unittest.mock.MagicMock) -> Tuple[bool, str]",
            "(unittest.mock.MagicMock) -> Tuple[bool, str]"
        ],
        "samples": 2
    },
    {
        "path": "src/check_first_posts_for_changes/main.py",
        "line": 94,
        "func_name": "update_one_topic_visibility",
        "type_comments": [
            "(unittest.mock.MagicMock) -> None"
        ],
        "samples": 1
    },
    {
        "path": "src/check_first_posts_for_changes/main.py",
        "line": 126,
        "func_name": "update_visibility_for_one_hidden_topic",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "src/check_first_posts_for_changes/main.py",
        "line": 158,
        "func_name": "parse_search",
        "type_comments": [
            "(unittest.mock.MagicMock) -> Tuple[str, bool]",
            "(unittest.mock.MagicMock) -> Tuple[str, bool]",
            "(unittest.mock.MagicMock) -> Tuple[str, bool]"
        ],
        "samples": 3
    },
    {
        "path": "src/check_first_posts_for_changes/main.py",
        "line": 179,
        "func_name": "get_status_from_content_and_send_to_topic_management",
        "type_comments": [
            "(str, str) -> None"
        ],
        "samples": 1
    },
    {
        "path": "src/check_first_posts_for_changes/main.py",
        "line": 226,
        "func_name": "update_first_posts_and_statuses",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "src/check_first_posts_for_changes/main.py",
        "line": 229,
        "func_name": "get_list_of_topics",
        "type_comments": [
            "() -> List"
        ],
        "samples": 1
    },
    {
        "path": "src/check_first_posts_for_changes/main.py",
        "line": 269,
        "func_name": "generate_list_of_topic_groups",
        "type_comments": [
            "() -> List[check_first_posts_for_changes.main.PercentGroup]"
        ],
        "samples": 1
    },
    {
        "path": "src/check_first_posts_for_changes/main.py",
        "line": 290,
        "func_name": "define_which_topic_groups_to_be_checked",
        "type_comments": [
            "(List[check_first_posts_for_changes.main.PercentGroup]) -> List[check_first_posts_for_changes.main.PercentGroup]"
        ],
        "samples": 1
    },
    {
        "path": "src/check_first_posts_for_changes/main.py",
        "line": 304,
        "func_name": "enrich_groups_with_topics",
        "type_comments": [
            "(List[check_first_posts_for_changes.main.PercentGroup], List) -> List[check_first_posts_for_changes.main.PercentGroup]"
        ],
        "samples": 1
    },
    {
        "path": "src/check_first_posts_for_changes/main.py",
        "line": 482,
        "func_name": "main",
        "type_comments": [
            "(unittest.mock.MagicMock, unittest.mock.MagicMock) -> None",
            "(unittest.mock.MagicMock, str) -> None"
        ],
        "samples": 2
    },
    {
        "path": "src/check_topics_by_upd_time/main.py",
        "line": 13,
        "func_name": "check_updates_in_folder_with_folders",
        "type_comments": [
            "(unittest.mock.MagicMock, None) -> Tuple[List, datetime.datetime]",
            "(unittest.mock.MagicMock, None) -> Tuple[List, datetime.datetime]",
            "(unittest.mock.MagicMock, unittest.mock.MagicMock) -> Tuple[List, datetime.datetime]"
        ],
        "samples": 3
    },
    {
        "path": "src/check_topics_by_upd_time/main.py",
        "line": 112,
        "func_name": "time_delta",
        "type_comments": [
            "(datetime.datetime, datetime.datetime) -> int"
        ],
        "samples": 3
    },
    {
        "path": "src/check_topics_by_upd_time/main.py",
        "line": 121,
        "func_name": "get_the_list_folders_to_update",
        "type_comments": [
            "(unittest.mock.MagicMock, unittest.mock.MagicMock, unittest.mock.MagicMock) -> List"
        ],
        "samples": 1
    },
    {
        "path": "src/check_topics_by_upd_time/main.py",
        "line": 136,
        "func_name": "main",
        "type_comments": [
            "(unittest.mock.MagicMock, unittest.mock.MagicMock) -> None",
            "(unittest.mock.MagicMock, str) -> None"
        ],
        "samples": 2
    },
    {
        "path": "src/communicate/main.py",
        "line": 260,
        "func_name": "compose_user_preferences_message",
        "type_comments": [
            "(psycopg2.extensions.cursor, int) -> List[Union[List[str], str]]"
        ],
        "samples": 1
    },
    {
        "path": "src/communicate/main.py",
        "line": 297,
        "func_name": "compose_msg_on_all_last_searches",
        "type_comments": [
            "(psycopg2.extensions.cursor, int) -> str"
        ],
        "samples": 1
    },
    {
        "path": "src/communicate/main.py",
        "line": 347,
        "func_name": "search_button_row_ikb",
        "type_comments": [
            "(unittest.mock.MagicMock, unittest.mock.MagicMock, unittest.mock.MagicMock, unittest.mock.MagicMock, unittest.mock.MagicMock) -> List[List[Dict[str, Union[str, unittest.mock.MagicMock, unittest.mock.MagicMock]]]]"
        ],
        "samples": 1
    },
    {
        "path": "src/communicate/main.py",
        "line": 361,
        "func_name": "compose_msg_on_all_last_searches_ikb",
        "type_comments": [
            "(psycopg2.extensions.cursor, int, int) -> List"
        ],
        "samples": 1
    },
    {
        "path": "src/communicate/main.py",
        "line": 420,
        "func_name": "compose_msg_on_active_searches_in_one_reg",
        "type_comments": [
            "(psycopg2.extensions.cursor, int, Tuple[str, str]) -> str",
            "(psycopg2.extensions.cursor, int, unittest.mock.MagicMock) -> str"
        ],
        "samples": 2
    },
    {
        "path": "src/communicate/main.py",
        "line": 481,
        "func_name": "compose_msg_on_active_searches_in_one_reg_ikb",
        "type_comments": [
            "(psycopg2.extensions.cursor, int, Tuple[str, str], int) -> List",
            "(psycopg2.extensions.cursor, int, unittest.mock.MagicMock, int) -> List"
        ],
        "samples": 2
    },
    {
        "path": "src/communicate/main.py",
        "line": 554,
        "func_name": "compose_full_message_on_list_of_searches",
        "type_comments": [
            "(psycopg2.extensions.cursor, str, int, int, str) -> str"
        ],
        "samples": 1
    },
    {
        "path": "src/communicate/main.py",
        "line": 617,
        "func_name": "compose_full_message_on_list_of_searches_ikb",
        "type_comments": [
            "(psycopg2.extensions.cursor, str, int, int, str) -> List[List[Dict[str, str]]]"
        ],
        "samples": 1
    },
    {
        "path": "src/communicate/main.py",
        "line": 668,
        "func_name": "check_if_new_user",
        "type_comments": [
            "(psycopg2.extensions.cursor, int) -> bool"
        ],
        "samples": 1
    },
    {
        "path": "src/communicate/main.py",
        "line": 683,
        "func_name": "check_if_user_has_no_regions",
        "type_comments": [
            "(unittest.mock.MagicMock, unittest.mock.MagicMock) -> bool"
        ],
        "samples": 1
    },
    {
        "path": "src/communicate/main.py",
        "line": 698,
        "func_name": "save_user_pref_role",
        "type_comments": [
            "(unittest.mock.MagicMock, unittest.mock.MagicMock, unittest.mock.MagicMock) -> str"
        ],
        "samples": 1
    },
    {
        "path": "src/communicate/main.py",
        "line": 721,
        "func_name": "save_user_pref_urgency",
        "type_comments": [
            "(unittest.mock.MagicMock, unittest.mock.MagicMock, unittest.mock.MagicMock, unittest.mock.MagicMock, unittest.mock.MagicMock, unittest.mock.MagicMock, unittest.mock.MagicMock) -> None"
        ],
        "samples": 1
    },
    {
        "path": "src/communicate/main.py",
        "line": 751,
        "func_name": "save_user_coordinates",
        "type_comments": [
            "(psycopg2.extensions.cursor, int, float, float) -> None"
        ],
        "samples": 2
    },
    {
        "path": "src/communicate/main.py",
        "line": 765,
        "func_name": "show_user_coordinates",
        "type_comments": [
            "(psycopg2.extensions.cursor, int) -> Tuple[str, str]"
        ],
        "samples": 1
    },
    {
        "path": "src/communicate/main.py",
        "line": 779,
        "func_name": "delete_user_coordinates",
        "type_comments": [
            "(psycopg2.extensions.cursor, int) -> None"
        ],
        "samples": 1
    },
    {
        "path": "src/communicate/main.py",
        "line": 787,
        "func_name": "distance_to_search",
        "type_comments": [
            "(unittest.mock.MagicMock, unittest.mock.MagicMock, unittest.mock.MagicMock, unittest.mock.MagicMock, unittest.mock.MagicMock) -> List[Union[int, str]]"
        ],
        "samples": 1
    },
    {
        "path": "src/communicate/main.py",
        "line": 812,
        "func_name": "calc_bearing",
        "type_comments": [
            "(float, float, float, float) -> float"
        ],
        "samples": 1
    },
    {
        "path": "src/communicate/main.py",
        "line": 823,
        "func_name": "calc_nsew",
        "type_comments": [
            "(float, float, float, float, unittest.mock.MagicMock) -> str"
        ],
        "samples": 1
    },
    {
        "path": "src/communicate/main.py",
        "line": 852,
        "func_name": "get_user_reg_folders_preferences",
        "type_comments": [
            "(psycopg2.extensions.cursor, int) -> List"
        ],
        "samples": 1
    },
    {
        "path": "src/communicate/main.py",
        "line": 873,
        "func_name": "get_user_role",
        "type_comments": [
            "(psycopg2.extensions.cursor, int) -> None"
        ],
        "samples": 1
    },
    {
        "path": "src/communicate/main.py",
        "line": 894,
        "func_name": "get_user_sys_roles",
        "type_comments": [
            "(unittest.mock.MagicMock, unittest.mock.MagicMock) -> List[str]"
        ],
        "samples": 1
    },
    {
        "path": "src/communicate/main.py",
        "line": 912,
        "func_name": "add_user_sys_role",
        "type_comments": [
            "(unittest.mock.MagicMock, unittest.mock.MagicMock, unittest.mock.MagicMock) -> None"
        ],
        "samples": 1
    },
    {
        "path": "src/communicate/main.py",
        "line": 929,
        "func_name": "delete_user_sys_role",
        "type_comments": [
            "(unittest.mock.MagicMock, unittest.mock.MagicMock, unittest.mock.MagicMock) -> None"
        ],
        "samples": 1
    },
    {
        "path": "src/communicate/main.py",
        "line": 946,
        "func_name": "save_preference",
        "type_comments": [
            "(psycopg2.extensions.cursor, int, str) -> None"
        ],
        "samples": 1
    },
    {
        "path": "src/communicate/main.py",
        "line": 1066,
        "func_name": "update_and_download_list_of_regions",
        "type_comments": [
            "(psycopg2.extensions.cursor, int, str, str, str) -> str"
        ],
        "samples": 1
    },
    {
        "path": "src/communicate/main.py",
        "line": 1262,
        "func_name": "get_last_bot_msg",
        "type_comments": [
            "(psycopg2.extensions.cursor, int) -> str"
        ],
        "samples": 1
    },
    {
        "path": "src/communicate/main.py",
        "line": 1289,
        "func_name": "generate_yandex_maps_place_link",
        "type_comments": [
            "(unittest.mock.MagicMock, unittest.mock.MagicMock, str) -> str",
            "(float, float, str) -> str"
        ],
        "samples": 2
    },
    {
        "path": "src/communicate/main.py",
        "line": 1304,
        "func_name": "get_param_if_exists",
        "type_comments": [
            "(unittest.mock.MagicMock, str) -> unittest.mock.MagicMock",
            "(unittest.mock.MagicMock, str) -> unittest.mock.MagicMock",
            "(unittest.mock.MagicMock, str) -> unittest.mock.MagicMock",
            "(unittest.mock.MagicMock, str) -> unittest.mock.MagicMock",
            "(unittest.mock.MagicMock, str) -> unittest.mock.MagicMock"
        ],
        "samples": 5
    },
    {
        "path": "src/communicate/main.py",
        "line": 1317,
        "func_name": "manage_age",
        "type_comments": [
            "(psycopg2.extensions.cursor, int, unittest.mock.MagicMock) -> pyannotate_runtime.collect_types.NoReturnType"
        ],
        "samples": 1
    },
    {
        "path": "src/communicate/main.py",
        "line": 1320,
        "func_name": "AgePeriod",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "src/communicate/main.py",
        "line": 1321,
        "func_name": "AgePeriod.__init__",
        "type_comments": [
            "(str, str, None, int, int, int) -> None"
        ],
        "samples": 5
    },
    {
        "path": "src/communicate/main.py",
        "line": 1400,
        "func_name": "save_user_pref_topic_type",
        "type_comments": [
            "(unittest.mock.MagicMock, unittest.mock.MagicMock, unittest.mock.MagicMock, unittest.mock.MagicMock) -> None"
        ],
        "samples": 1
    },
    {
        "path": "src/communicate/main.py",
        "line": 1401,
        "func_name": "save",
        "type_comments": [
            "(unittest.mock.MagicMock) -> None"
        ],
        "samples": 1
    },
    {
        "path": "src/communicate/main.py",
        "line": 1427,
        "func_name": "manage_radius",
        "type_comments": [
            "(psycopg2.extensions.cursor, int, str, str, str, str, str, str, str, str) -> Tuple[str, telegram._replykeyboardmarkup.ReplyKeyboardMarkup, None]"
        ],
        "samples": 1
    },
    {
        "path": "src/communicate/main.py",
        "line": 1441,
        "func_name": "check_saved_radius",
        "type_comments": [
            "(int) -> None"
        ],
        "samples": 1
    },
    {
        "path": "src/communicate/main.py",
        "line": 1537,
        "func_name": "manage_topic_type",
        "type_comments": [
            "(unittest.mock.MagicMock, unittest.mock.MagicMock, unittest.mock.MagicMock, unittest.mock.MagicMock, unittest.mock.MagicMock, unittest.mock.MagicMock, unittest.mock.MagicMock, unittest.mock.MagicMock) -> pyannotate_runtime.collect_types.NoReturnType"
        ],
        "samples": 1
    },
    {
        "path": "src/communicate/main.py",
        "line": 1542,
        "func_name": "check_saved_topic_types",
        "type_comments": [
            "(unittest.mock.MagicMock) -> List"
        ],
        "samples": 1
    },
    {
        "path": "src/communicate/main.py",
        "line": 1658,
        "func_name": "manage_search_whiteness",
        "type_comments": [
            "(unittest.mock.MagicMock, unittest.mock.MagicMock, unittest.mock.MagicMock, unittest.mock.MagicMock, unittest.mock.MagicMock, unittest.mock.MagicMock) -> pyannotate_runtime.collect_types.NoReturnType"
        ],
        "samples": 1
    },
    {
        "path": "src/communicate/main.py",
        "line": 1730,
        "func_name": "manage_search_follow_mode",
        "type_comments": [
            "(unittest.mock.MagicMock, unittest.mock.MagicMock, unittest.mock.MagicMock, unittest.mock.MagicMock, unittest.mock.MagicMock, unittest.mock.MagicMock) -> pyannotate_runtime.collect_types.NoReturnType"
        ],
        "samples": 1
    },
    {
        "path": "src/communicate/main.py",
        "line": 1748,
        "func_name": "manage_if_moscow",
        "type_comments": [
            "(unittest.mock.MagicMock, unittest.mock.MagicMock, unittest.mock.MagicMock, unittest.mock.MagicMock, unittest.mock.MagicMock, unittest.mock.MagicMock, unittest.mock.MagicMock, unittest.mock.MagicMock, unittest.mock.MagicMock, unittest.mock.MagicMock) -> Tuple[None, None]"
        ],
        "samples": 1
    },
    {
        "path": "src/communicate/main.py",
        "line": 1807,
        "func_name": "manage_linking_to_forum",
        "type_comments": [
            "(psycopg2.extensions.cursor, str, int, str, str, str, str, str, str, str, str, unittest.mock.MagicMock) -> Tuple[str, telegram._replykeyboardmarkup.ReplyKeyboardMarkup, str]"
        ],
        "samples": 1
    },
    {
        "path": "src/communicate/main.py",
        "line": 1905,
        "func_name": "save_onboarding_step",
        "type_comments": [
            "(unittest.mock.MagicMock, unittest.mock.MagicMock, unittest.mock.MagicMock) -> pyannotate_runtime.collect_types.NoReturnType"
        ],
        "samples": 1
    },
    {
        "path": "src/communicate/main.py",
        "line": 1923,
        "func_name": "check_onboarding_step",
        "type_comments": [
            "(psycopg2.extensions.cursor, int, bool) -> Tuple[int, str]"
        ],
        "samples": 1
    },
    {
        "path": "src/communicate/main.py",
        "line": 1948,
        "func_name": "leave_chat_async",
        "type_comments": [
            "(telegram.ext._callbackcontext.CallbackContext) -> pyannotate_runtime.collect_types.NoReturnType"
        ],
        "samples": 1
    },
    {
        "path": "src/communicate/main.py",
        "line": 1954,
        "func_name": "prepare_message_for_leave_chat_async",
        "type_comments": [
            "(unittest.mock.MagicMock) -> pyannotate_runtime.collect_types.NoReturnType"
        ],
        "samples": 5
    },
    {
        "path": "src/communicate/main.py",
        "line": 1970,
        "func_name": "process_leaving_chat_async",
        "type_comments": [
            "(unittest.mock.MagicMock) -> None"
        ],
        "samples": 1
    },
    {
        "path": "src/communicate/main.py",
        "line": 1976,
        "func_name": "process_response_of_api_call",
        "type_comments": [
            "(int, unittest.mock.MagicMock, str) -> str",
            "(unittest.mock.MagicMock, None, str) -> pyannotate_runtime.collect_types.NoReturnType",
            "(unittest.mock.MagicMock, None, str) -> pyannotate_runtime.collect_types.NoReturnType"
        ],
        "samples": 3
    },
    {
        "path": "src/communicate/main.py",
        "line": 2028,
        "func_name": "make_api_call",
        "type_comments": [
            "(str, unittest.mock.MagicMock, Dict[str, Union[unittest.mock.MagicMock, unittest.mock.MagicMock, unittest.mock.MagicMock]], str) -> pyannotate_runtime.collect_types.NoReturnType",
            "(str, str, Dict, unittest.mock.MagicMock) -> None"
        ],
        "samples": 2
    },
    {
        "path": "src/communicate/main.py",
        "line": 2059,
        "func_name": "get_last_bot_message_id",
        "type_comments": [
            "(unittest.mock.MagicMock) -> unittest.mock.MagicMock"
        ],
        "samples": 1
    },
    {
        "path": "src/communicate/main.py",
        "line": 2071,
        "func_name": "inline_processing",
        "type_comments": [
            "(unittest.mock.MagicMock, unittest.mock.MagicMock, unittest.mock.MagicMock) -> None"
        ],
        "samples": 1
    },
    {
        "path": "src/communicate/main.py",
        "line": 2088,
        "func_name": "send_message_to_api",
        "type_comments": [
            "(unittest.mock.MagicMock, unittest.mock.MagicMock, unittest.mock.MagicMock, unittest.mock.MagicMock) -> pyannotate_runtime.collect_types.NoReturnType"
        ],
        "samples": 1
    },
    {
        "path": "src/communicate/main.py",
        "line": 2124,
        "func_name": "send_callback_answer_to_api",
        "type_comments": [
            "(unittest.mock.MagicMock, unittest.mock.MagicMock, unittest.mock.MagicMock) -> pyannotate_runtime.collect_types.NoReturnType"
        ],
        "samples": 1
    },
    {
        "path": "src/communicate/main.py",
        "line": 2151,
        "func_name": "api_callback_edit_inline_keyboard",
        "type_comments": [
            "(unittest.mock.MagicMock, unittest.mock.MagicMock, unittest.mock.MagicMock, unittest.mock.MagicMock) -> pyannotate_runtime.collect_types.NoReturnType"
        ],
        "samples": 1
    },
    {
        "path": "src/communicate/main.py",
        "line": 2169,
        "func_name": "get_the_update",
        "type_comments": [
            "(unittest.mock.MagicMock, unittest.mock.MagicMock) -> None"
        ],
        "samples": 1
    },
    {
        "path": "src/communicate/main.py",
        "line": 2184,
        "func_name": "get_basic_update_parameters",
        "type_comments": [
            "(unittest.mock.MagicMock) -> Tuple[unittest.mock.MagicMock, unittest.mock.MagicMock, unittest.mock.MagicMock, unittest.mock.MagicMock, unittest.mock.MagicMock, unittest.mock.MagicMock, unittest.mock.MagicMock, unittest.mock.MagicMock, unittest.mock.MagicMock, unittest.mock.MagicMock]",
            "(unittest.mock.MagicMock) -> Tuple[unittest.mock.MagicMock, unittest.mock.MagicMock, unittest.mock.MagicMock, unittest.mock.MagicMock, unittest.mock.MagicMock, unittest.mock.MagicMock, unittest.mock.MagicMock, unittest.mock.MagicMock, unittest.mock.MagicMock, unittest.mock.MagicMock]"
        ],
        "samples": 2
    },
    {
        "path": "src/communicate/main.py",
        "line": 2267,
        "func_name": "save_new_user",
        "type_comments": [
            "(int, str) -> None"
        ],
        "samples": 1
    },
    {
        "path": "src/communicate/main.py",
        "line": 2281,
        "func_name": "process_unneeded_messages",
        "type_comments": [
            "(unittest.mock.MagicMock, unittest.mock.MagicMock, unittest.mock.MagicMock, unittest.mock.MagicMock, unittest.mock.MagicMock, unittest.mock.MagicMock, unittest.mock.MagicMock, unittest.mock.MagicMock, unittest.mock.MagicMock, unittest.mock.MagicMock) -> None",
            "(unittest.mock.MagicMock, unittest.mock.MagicMock, unittest.mock.MagicMock, unittest.mock.MagicMock, unittest.mock.MagicMock, unittest.mock.MagicMock, unittest.mock.MagicMock, unittest.mock.MagicMock, unittest.mock.MagicMock, unittest.mock.MagicMock) -> None"
        ],
        "samples": 2
    },
    {
        "path": "src/communicate/main.py",
        "line": 2332,
        "func_name": "process_block_unblock_user",
        "type_comments": [
            "(unittest.mock.MagicMock, unittest.mock.MagicMock) -> None"
        ],
        "samples": 1
    },
    {
        "path": "src/communicate/main.py",
        "line": 2370,
        "func_name": "save_bot_reply_to_user",
        "type_comments": [
            "(psycopg2.extensions.cursor, int, str) -> None"
        ],
        "samples": 2
    },
    {
        "path": "src/communicate/main.py",
        "line": 2384,
        "func_name": "save_user_message_to_bot",
        "type_comments": [
            "(psycopg2.extensions.cursor, int, str) -> None"
        ],
        "samples": 1
    },
    {
        "path": "src/communicate/main.py",
        "line": 2395,
        "func_name": "get_coordinates_from_string",
        "type_comments": [
            "(str, unittest.mock.MagicMock, unittest.mock.MagicMock) -> Tuple[unittest.mock.MagicMock, unittest.mock.MagicMock]"
        ],
        "samples": 1
    },
    {
        "path": "src/communicate/main.py",
        "line": 2416,
        "func_name": "process_user_coordinates",
        "type_comments": [
            "(psycopg2.extensions.cursor, int, float, float, str, str, str, str) -> None"
        ],
        "samples": 1
    },
    {
        "path": "src/communicate/main.py",
        "line": 2466,
        "func_name": "run_onboarding",
        "type_comments": [
            "(int, str, int, str) -> int"
        ],
        "samples": 1
    },
    {
        "path": "src/communicate/main.py",
        "line": 2478,
        "func_name": "compose_msg_on_user_setting_fullness",
        "type_comments": [
            "(unittest.mock.MagicMock, int) -> None"
        ],
        "samples": 1
    },
    {
        "path": "src/communicate/main.py",
        "line": 2583,
        "func_name": "if_user_enables",
        "type_comments": [
            "(unittest.mock.MagicMock) -> None",
            "(unittest.mock.MagicMock) -> None"
        ],
        "samples": 2
    },
    {
        "path": "src/communicate/main.py",
        "line": 2595,
        "func_name": "save_last_user_inline_dialogue",
        "type_comments": [
            "(unittest.mock.MagicMock, int, int) -> None"
        ],
        "samples": 1
    },
    {
        "path": "src/communicate/main.py",
        "line": 2608,
        "func_name": "get_last_user_inline_dialogue",
        "type_comments": [
            "(unittest.mock.MagicMock, int) -> List"
        ],
        "samples": 1
    },
    {
        "path": "src/communicate/main.py",
        "line": 2622,
        "func_name": "delete_last_user_inline_dialogue",
        "type_comments": [
            "(unittest.mock.MagicMock, int) -> None"
        ],
        "samples": 1
    },
    {
        "path": "src/communicate/main.py",
        "line": 2629,
        "func_name": "get_search_follow_mode",
        "type_comments": [
            "(unittest.mock.MagicMock, int) -> bool"
        ],
        "samples": 1
    },
    {
        "path": "src/communicate/main.py",
        "line": 2636,
        "func_name": "set_search_follow_mode",
        "type_comments": [
            "(unittest.mock.MagicMock, int, unittest.mock.MagicMock) -> None"
        ],
        "samples": 1
    },
    {
        "path": "src/communicate/main.py",
        "line": 2647,
        "func_name": "main",
        "type_comments": [
            "(unittest.mock.MagicMock) -> str",
            "(unittest.mock.MagicMock) -> str"
        ],
        "samples": 2
    },
    {
        "path": "src/communicate/main.py",
        "line": 2660,
        "func_name": "process_update",
        "type_comments": [
            "(unittest.mock.MagicMock) -> str"
        ],
        "samples": 1
    },
    {
        "path": "src/compose_notifications/main.py",
        "line": 72,
        "func_name": "LineInChangeLog.__init__",
        "type_comments": [
            "(None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None) -> None"
        ],
        "samples": 5
    },
    {
        "path": "src/compose_notifications/main.py",
        "line": 144,
        "func_name": "LineInChangeLog.__str__",
        "type_comments": [
            "() -> str"
        ],
        "samples": 5
    },
    {
        "path": "src/compose_notifications/main.py",
        "line": 286,
        "func_name": "sql_connect",
        "type_comments": [
            "() -> sqlalchemy.engine.base.Engine"
        ],
        "samples": 5
    },
    {
        "path": "src/compose_notifications/main.py",
        "line": 290,
        "func_name": "define_family_name",
        "type_comments": [
            "(str, unittest.mock.MagicMock) -> unittest.mock.MagicMock"
        ],
        "samples": 1
    },
    {
        "path": "src/compose_notifications/main.py",
        "line": 320,
        "func_name": "define_dist_and_dir_to_search",
        "type_comments": [
            "(unittest.mock.MagicMock, unittest.mock.MagicMock, unittest.mock.MagicMock, unittest.mock.MagicMock) -> Tuple[float, str]",
            "(unittest.mock.MagicMock, unittest.mock.MagicMock, unittest.mock.MagicMock, unittest.mock.MagicMock) -> Tuple[float, str]"
        ],
        "samples": 3
    },
    {
        "path": "src/compose_notifications/main.py",
        "line": 323,
        "func_name": "calc_bearing",
        "type_comments": [
            "(float, float, float, float) -> float"
        ],
        "samples": 3
    },
    {
        "path": "src/compose_notifications/main.py",
        "line": 334,
        "func_name": "calc_direction",
        "type_comments": [
            "(float, float, float, float) -> str"
        ],
        "samples": 3
    },
    {
        "path": "src/compose_notifications/main.py",
        "line": 379,
        "func_name": "compose_new_records_from_change_log",
        "type_comments": [
            "(sqlalchemy.engine.base.Connection) -> compose_notifications.main.LineInChangeLog"
        ],
        "samples": 5
    },
    {
        "path": "src/compose_notifications/main.py",
        "line": 418,
        "func_name": "enrich_new_record_from_searches",
        "type_comments": [
            "(sqlalchemy.engine.base.Connection, compose_notifications.main.LineInChangeLog) -> compose_notifications.main.LineInChangeLog"
        ],
        "samples": 5
    },
    {
        "path": "src/compose_notifications/main.py",
        "line": 508,
        "func_name": "enrich_new_record_with_search_activities",
        "type_comments": [
            "(sqlalchemy.engine.base.Connection, compose_notifications.main.LineInChangeLog) -> compose_notifications.main.LineInChangeLog"
        ],
        "samples": 5
    },
    {
        "path": "src/compose_notifications/main.py",
        "line": 536,
        "func_name": "enrich_new_record_with_managers",
        "type_comments": [
            "(sqlalchemy.engine.base.Connection, compose_notifications.main.LineInChangeLog) -> compose_notifications.main.LineInChangeLog"
        ],
        "samples": 5
    },
    {
        "path": "src/compose_notifications/main.py",
        "line": 561,
        "func_name": "enrich_new_record_with_comments",
        "type_comments": [
            "(sqlalchemy.engine.base.Connection, str, compose_notifications.main.LineInChangeLog) -> compose_notifications.main.LineInChangeLog"
        ],
        "samples": 5
    },
    {
        "path": "src/compose_notifications/main.py",
        "line": 624,
        "func_name": "compose_com_msg_on_new_topic",
        "type_comments": [
            "(unittest.mock.MagicMock) -> pyannotate_runtime.collect_types.NoReturnType"
        ],
        "samples": 1
    },
    {
        "path": "src/compose_notifications/main.py",
        "line": 687,
        "func_name": "compose_com_msg_on_status_change",
        "type_comments": [
            "(unittest.mock.MagicMock) -> Tuple[str, str]"
        ],
        "samples": 1
    },
    {
        "path": "src/compose_notifications/main.py",
        "line": 708,
        "func_name": "compose_com_msg_on_new_comments",
        "type_comments": [
            "(unittest.mock.MagicMock) -> Tuple[str, None]"
        ],
        "samples": 1
    },
    {
        "path": "src/compose_notifications/main.py",
        "line": 728,
        "func_name": "compose_com_msg_on_inforg_comments",
        "type_comments": [
            "(unittest.mock.MagicMock) -> Tuple[str, str, str]"
        ],
        "samples": 1
    },
    {
        "path": "src/compose_notifications/main.py",
        "line": 752,
        "func_name": "compose_com_msg_on_title_change",
        "type_comments": [
            "(unittest.mock.MagicMock) -> str"
        ],
        "samples": 1
    },
    {
        "path": "src/compose_notifications/main.py",
        "line": 761,
        "func_name": "get_coords_from_list",
        "type_comments": [
            "(None) -> Tuple[None, None]",
            "(unittest.mock.MagicMock) -> Tuple[None, None]"
        ],
        "samples": 3
    },
    {
        "path": "src/compose_notifications/main.py",
        "line": 791,
        "func_name": "compose_com_msg_on_first_post_change",
        "type_comments": [
            "(unittest.mock.MagicMock) -> str"
        ],
        "samples": 1
    },
    {
        "path": "src/compose_notifications/main.py",
        "line": 869,
        "func_name": "add_tel_link",
        "type_comments": [
            "(str, str) -> None"
        ],
        "samples": 1
    },
    {
        "path": "src/compose_notifications/main.py",
        "line": 892,
        "func_name": "enrich_new_record_with_clickable_name",
        "type_comments": [
            "(compose_notifications.main.LineInChangeLog) -> compose_notifications.main.LineInChangeLog"
        ],
        "samples": 5
    },
    {
        "path": "src/compose_notifications/main.py",
        "line": 911,
        "func_name": "enrich_new_record_with_emoji",
        "type_comments": [
            "(compose_notifications.main.LineInChangeLog) -> compose_notifications.main.LineInChangeLog"
        ],
        "samples": 5
    },
    {
        "path": "src/compose_notifications/main.py",
        "line": 932,
        "func_name": "enrich_new_record_with_com_message_texts",
        "type_comments": [
            "(compose_notifications.main.LineInChangeLog) -> compose_notifications.main.LineInChangeLog"
        ],
        "samples": 5
    },
    {
        "path": "src/compose_notifications/main.py",
        "line": 963,
        "func_name": "compose_users_list_from_users",
        "type_comments": [
            "(sqlalchemy.engine.base.Connection, compose_notifications.main.LineInChangeLog) -> List"
        ],
        "samples": 5
    },
    {
        "path": "src/compose_notifications/main.py",
        "line": 1072,
        "func_name": "enrich_users_list_with_age_periods",
        "type_comments": [
            "(sqlalchemy.engine.base.Connection, List) -> List"
        ],
        "samples": 5
    },
    {
        "path": "src/compose_notifications/main.py",
        "line": 1101,
        "func_name": "enrich_users_list_with_radius",
        "type_comments": [
            "(sqlalchemy.engine.base.Connection, List) -> None"
        ],
        "samples": 5
    },
    {
        "path": "src/compose_notifications/main.py",
        "line": 1127,
        "func_name": "get_list_of_admins_and_testers",
        "type_comments": [
            "(sqlalchemy.engine.base.Connection) -> Tuple[List, List]"
        ],
        "samples": 5
    },
    {
        "path": "src/compose_notifications/main.py",
        "line": 1151,
        "func_name": "record_notification_statistics",
        "type_comments": [
            "(sqlalchemy.engine.base.Connection) -> None"
        ],
        "samples": 5
    },
    {
        "path": "src/compose_notifications/main.py",
        "line": 1179,
        "func_name": "iterate_over_all_users",
        "type_comments": [
            "(sqlalchemy.engine.base.Connection, List, compose_notifications.main.LineInChangeLog, None, int) -> compose_notifications.main.LineInChangeLog"
        ],
        "samples": 5
    },
    {
        "path": "src/compose_notifications/main.py",
        "line": 1289,
        "func_name": "process_mailing_id",
        "type_comments": [
            "(int) -> pyannotate_runtime.collect_types.NoReturnType"
        ],
        "samples": 5
    },
    {
        "path": "src/compose_notifications/main.py",
        "line": 1686,
        "func_name": "generate_yandex_maps_place_link2",
        "type_comments": [
            "(unittest.mock.MagicMock, unittest.mock.MagicMock, str) -> str",
            "(unittest.mock.MagicMock, unittest.mock.MagicMock, unittest.mock.MagicMock) -> str"
        ],
        "samples": 2
    },
    {
        "path": "src/compose_notifications/main.py",
        "line": 1695,
        "func_name": "compose_individual_message_on_new_search",
        "type_comments": [
            "(unittest.mock.MagicMock, unittest.mock.MagicMock, unittest.mock.MagicMock, unittest.mock.MagicMock, unittest.mock.MagicMock, unittest.mock.MagicMock, unittest.mock.MagicMock) -> unittest.mock.MagicMock"
        ],
        "samples": 1
    },
    {
        "path": "src/compose_notifications/main.py",
        "line": 1798,
        "func_name": "compose_individual_message_on_first_post_change",
        "type_comments": [
            "(unittest.mock.MagicMock, unittest.mock.MagicMock) -> unittest.mock.MagicMock"
        ],
        "samples": 1
    },
    {
        "path": "src/compose_notifications/main.py",
        "line": 1808,
        "func_name": "mark_new_record_as_processed",
        "type_comments": [
            "(sqlalchemy.engine.base.Connection, compose_notifications.main.LineInChangeLog) -> None"
        ],
        "samples": 5
    },
    {
        "path": "src/compose_notifications/main.py",
        "line": 1841,
        "func_name": "mark_new_comments_as_processed",
        "type_comments": [
            "(sqlalchemy.engine.base.Connection, compose_notifications.main.LineInChangeLog) -> None"
        ],
        "samples": 5
    },
    {
        "path": "src/compose_notifications/main.py",
        "line": 1880,
        "func_name": "check_if_need_compose_more",
        "type_comments": [
            "(sqlalchemy.engine.base.Connection, int) -> pyannotate_runtime.collect_types.UnknownType"
        ],
        "samples": 4
    },
    {
        "path": "src/compose_notifications/main.py",
        "line": 1897,
        "func_name": "delete_ended_search_following",
        "type_comments": [
            "(sqlalchemy.engine.base.Connection, compose_notifications.main.LineInChangeLog) -> None"
        ],
        "samples": 5
    },
    {
        "path": "src/compose_notifications/main.py",
        "line": 1909,
        "func_name": "main",
        "type_comments": [
            "(Dict[str, bytes], str) -> pyannotate_runtime.collect_types.UnknownType"
        ],
        "samples": 4
    },
    {
        "path": "src/connect_to_forum/main.py",
        "line": 40,
        "func_name": "login_into_forum",
        "type_comments": [
            "(str) -> None"
        ],
        "samples": 1
    },
    {
        "path": "src/connect_to_forum/main.py",
        "line": 84,
        "func_name": "get_user_id",
        "type_comments": [
            "(str) -> int"
        ],
        "samples": 1
    },
    {
        "path": "src/connect_to_forum/main.py",
        "line": 116,
        "func_name": "get_user_attributes",
        "type_comments": [
            "(str) -> bs4.element.Tag"
        ],
        "samples": 1
    },
    {
        "path": "src/connect_to_forum/main.py",
        "line": 127,
        "func_name": "get_user_data",
        "type_comments": [
            "(unittest.mock.MagicMock) -> connect_to_forum.main.ForumUser",
            "(bs4.element.Tag) -> connect_to_forum.main.ForumUser"
        ],
        "samples": 2
    },
    {
        "path": "src/connect_to_forum/main.py",
        "line": 152,
        "func_name": "match_user_region_from_forum_to_bot",
        "type_comments": [
            "(unittest.mock.MagicMock) -> None",
            "(str) -> None"
        ],
        "samples": 2
    },
    {
        "path": "src/connect_to_forum/main.py",
        "line": 221,
        "func_name": "main",
        "type_comments": [
            "(unittest.mock.MagicMock, str) -> pyannotate_runtime.collect_types.NoReturnType",
            "(Dict[str, bytes], str) -> None"
        ],
        "samples": 3
    },
    {
        "path": "src/identify_updates_of_first_posts/main.py",
        "line": 26,
        "func_name": "sql_connect",
        "type_comments": [
            "() -> sqlalchemy.engine.base.Engine"
        ],
        "samples": 1
    },
    {
        "path": "src/identify_updates_of_first_posts/main.py",
        "line": 30,
        "func_name": "get_the_list_of_coords_out_of_text",
        "type_comments": [
            "(str) -> List"
        ],
        "samples": 2
    },
    {
        "path": "src/identify_updates_of_first_posts/main.py",
        "line": 99,
        "func_name": "compose_diff_message",
        "type_comments": [
            "(unittest.mock.MagicMock, unittest.mock.MagicMock) -> pyannotate_runtime.collect_types.NoReturnType"
        ],
        "samples": 1
    },
    {
        "path": "src/identify_updates_of_first_posts/main.py",
        "line": 138,
        "func_name": "process_first_page_comparison",
        "type_comments": [
            "(sqlalchemy.engine.base.Connection, int, str, str) -> Tuple[None, None]"
        ],
        "samples": 1
    },
    {
        "path": "src/identify_updates_of_first_posts/main.py",
        "line": 200,
        "func_name": "save_new_record_into_change_log",
        "type_comments": [
            "(sqlalchemy.engine.base.Connection, int, List, str, int) -> int"
        ],
        "samples": 1
    },
    {
        "path": "src/identify_updates_of_first_posts/main.py",
        "line": 218,
        "func_name": "parse_search_folder",
        "type_comments": [
            "(unittest.mock.MagicMock) -> None"
        ],
        "samples": 1
    },
    {
        "path": "src/identify_updates_of_first_posts/main.py",
        "line": 239,
        "func_name": "get_compressed_first_post",
        "type_comments": [
            "(str) -> str"
        ],
        "samples": 1
    },
    {
        "path": "src/identify_updates_of_first_posts/main.py",
        "line": 263,
        "func_name": "split_text_to_deleted_and_regular_parts",
        "type_comments": [
            "(str) -> Tuple[str, str]"
        ],
        "samples": 1
    },
    {
        "path": "src/identify_updates_of_first_posts/main.py",
        "line": 288,
        "func_name": "get_field_trip_details_from_text",
        "type_comments": [
            "(str) -> Dict[str, bool]"
        ],
        "samples": 1
    },
    {
        "path": "src/identify_updates_of_first_posts/main.py",
        "line": 304,
        "func_name": "FieldTrip",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "src/identify_updates_of_first_posts/main.py",
        "line": 305,
        "func_name": "FieldTrip.__init__",
        "type_comments": [
            "(bool, bool, bool, bool, bool, None, None, None, None) -> None"
        ],
        "samples": 1
    },
    {
        "path": "src/identify_updates_of_first_posts/main.py",
        "line": 329,
        "func_name": "Block",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "src/identify_updates_of_first_posts/main.py",
        "line": 434,
        "func_name": "save_function_into_register",
        "type_comments": [
            "(sqlalchemy.engine.base.Connection, unittest.mock.MagicMock, unittest.mock.MagicMock, unittest.mock.MagicMock, unittest.mock.MagicMock) -> None"
        ],
        "samples": 1
    },
    {
        "path": "src/identify_updates_of_first_posts/main.py",
        "line": 464,
        "func_name": "main",
        "type_comments": [
            "(unittest.mock.MagicMock, unittest.mock.MagicMock) -> pyannotate_runtime.collect_types.NoReturnType",
            "(Dict[str, bytes], str) -> pyannotate_runtime.collect_types.NoReturnType"
        ],
        "samples": 2
    },
    {
        "path": "src/identify_updates_of_folders/main.py",
        "line": 18,
        "func_name": "set_cloud_storage",
        "type_comments": [
            "(str) -> pyannotate_runtime.collect_types.NoReturnType",
            "(unittest.mock.MagicMock) -> pyannotate_runtime.collect_types.NoReturnType"
        ],
        "samples": 5
    },
    {
        "path": "src/identify_updates_of_folders/main.py",
        "line": 30,
        "func_name": "write_snapshot_to_cloud_storage",
        "type_comments": [
            "(unittest.mock.MagicMock, unittest.mock.MagicMock) -> pyannotate_runtime.collect_types.NoReturnType"
        ],
        "samples": 1
    },
    {
        "path": "src/identify_updates_of_folders/main.py",
        "line": 37,
        "func_name": "read_snapshot_from_cloud_storage",
        "type_comments": [
            "(str) -> None"
        ],
        "samples": 5
    },
    {
        "path": "src/identify_updates_of_folders/main.py",
        "line": 51,
        "func_name": "compare_old_and_new_folder_hash_and_give_list_of_upd_folders",
        "type_comments": [
            "(str, unittest.mock.MagicMock) -> pyannotate_runtime.collect_types.NoReturnType",
            "(str, None) -> pyannotate_runtime.collect_types.NoReturnType"
        ],
        "samples": 2
    },
    {
        "path": "src/identify_updates_of_folders/main.py",
        "line": 87,
        "func_name": "decompose_folder_to_subfolders_and_searches",
        "type_comments": [
            "(unittest.mock.MagicMock) -> Tuple[List, List, List, None]"
        ],
        "samples": 1
    },
    {
        "path": "src/identify_updates_of_folders/main.py",
        "line": 175,
        "func_name": "FolderForDecompose.__init__",
        "type_comments": [
            "(None, None, None, None, None, None, None, None, None, None) -> None"
        ],
        "samples": 2
    },
    {
        "path": "src/identify_updates_of_folders/main.py",
        "line": 214,
        "func_name": "main",
        "type_comments": [
            "(unittest.mock.MagicMock, unittest.mock.MagicMock) -> pyannotate_runtime.collect_types.NoReturnType",
            "(Dict[str, bytes], str) -> pyannotate_runtime.collect_types.NoReturnType"
        ],
        "samples": 2
    },
    {
        "path": "src/identify_updates_of_topics/main.py",
        "line": 107,
        "func_name": "set_cloud_storage",
        "type_comments": [
            "(unittest.mock.MagicMock, unittest.mock.MagicMock) -> pyannotate_runtime.collect_types.NoReturnType",
            "(unittest.mock.MagicMock, unittest.mock.MagicMock) -> pyannotate_runtime.collect_types.NoReturnType",
            "(unittest.mock.MagicMock, unittest.mock.MagicMock) -> pyannotate_runtime.collect_types.NoReturnType",
            "(str, int) -> pyannotate_runtime.collect_types.NoReturnType"
        ],
        "samples": 4
    },
    {
        "path": "src/identify_updates_of_topics/main.py",
        "line": 121,
        "func_name": "write_snapshot_to_cloud_storage",
        "type_comments": [
            "(unittest.mock.MagicMock, unittest.mock.MagicMock, unittest.mock.MagicMock) -> pyannotate_runtime.collect_types.NoReturnType"
        ],
        "samples": 1
    },
    {
        "path": "src/identify_updates_of_topics/main.py",
        "line": 130,
        "func_name": "read_snapshot_from_cloud_storage",
        "type_comments": [
            "(unittest.mock.MagicMock, unittest.mock.MagicMock) -> None"
        ],
        "samples": 1
    },
    {
        "path": "src/identify_updates_of_topics/main.py",
        "line": 143,
        "func_name": "read_yaml_from_cloud_storage",
        "type_comments": [
            "(unittest.mock.MagicMock, unittest.mock.MagicMock) -> None"
        ],
        "samples": 1
    },
    {
        "path": "src/identify_updates_of_topics/main.py",
        "line": 156,
        "func_name": "save_last_api_call_time_to_psql",
        "type_comments": [
            "(sqlalchemy.engine.base.Engine, str) -> bool"
        ],
        "samples": 5
    },
    {
        "path": "src/identify_updates_of_topics/main.py",
        "line": 180,
        "func_name": "get_last_api_call_time_from_psql",
        "type_comments": [
            "(sqlalchemy.engine.base.Engine, str) -> None"
        ],
        "samples": 5
    },
    {
        "path": "src/identify_updates_of_topics/main.py",
        "line": 202,
        "func_name": "rate_limit_for_api",
        "type_comments": [
            "(sqlalchemy.engine.base.Engine, str) -> None"
        ],
        "samples": 5
    },
    {
        "path": "src/identify_updates_of_topics/main.py",
        "line": 229,
        "func_name": "get_coordinates",
        "type_comments": [
            "(sqlalchemy.engine.base.Engine, str) -> Tuple[None, None]"
        ],
        "samples": 5
    },
    {
        "path": "src/identify_updates_of_topics/main.py",
        "line": 232,
        "func_name": "get_geolocation_form_psql",
        "type_comments": [
            "(sqlalchemy.engine.base.Engine, str) -> Tuple[str, None, None, None]"
        ],
        "samples": 5
    },
    {
        "path": "src/identify_updates_of_topics/main.py",
        "line": 259,
        "func_name": "save_geolocation_in_psql",
        "type_comments": [
            "(sqlalchemy.engine.base.Engine, str, str, None, None, str) -> None"
        ],
        "samples": 5
    },
    {
        "path": "src/identify_updates_of_topics/main.py",
        "line": 307,
        "func_name": "get_coordinates_from_address_by_yandex",
        "type_comments": [
            "(str) -> Tuple[None, None]"
        ],
        "samples": 5
    },
    {
        "path": "src/identify_updates_of_topics/main.py",
        "line": 383,
        "func_name": "parse_coordinates",
        "type_comments": [
            "(psycopg2.extensions.connection, unittest.mock.MagicMock) -> List[Union[int, str]]",
            "(sqlalchemy.engine.base.Engine, int) -> List[Union[int, str]]"
        ],
        "samples": 3
    },
    {
        "path": "src/identify_updates_of_topics/main.py",
        "line": 388,
        "func_name": "parse_address_from_title",
        "type_comments": [
            "(None) -> pyannotate_runtime.collect_types.NoReturnType"
        ],
        "samples": 3
    },
    {
        "path": "src/identify_updates_of_topics/main.py",
        "line": 853,
        "func_name": "update_coordinates",
        "type_comments": [
            "(sqlalchemy.engine.base.Engine, unittest.mock.MagicMock) -> None",
            "(sqlalchemy.engine.base.Engine, List[identify_updates_of_topics.main.SearchSummary]) -> None"
        ],
        "samples": 3
    },
    {
        "path": "src/identify_updates_of_topics/main.py",
        "line": 910,
        "func_name": "sql_connect",
        "type_comments": [
            "() -> sqlalchemy.engine.base.Engine"
        ],
        "samples": 5
    },
    {
        "path": "src/identify_updates_of_topics/main.py",
        "line": 914,
        "func_name": "define_start_time_of_search",
        "type_comments": [
            "(unittest.mock.MagicMock) -> unittest.mock.MagicMock",
            "(bs4.element.Tag) -> str"
        ],
        "samples": 5
    },
    {
        "path": "src/identify_updates_of_topics/main.py",
        "line": 923,
        "func_name": "profile_get_type_of_activity",
        "type_comments": [
            "(str) -> List"
        ],
        "samples": 1
    },
    {
        "path": "src/identify_updates_of_topics/main.py",
        "line": 1003,
        "func_name": "profile_get_managers",
        "type_comments": [
            "(str) -> List"
        ],
        "samples": 1
    },
    {
        "path": "src/identify_updates_of_topics/main.py",
        "line": 1093,
        "func_name": "parse_search_profile",
        "type_comments": [
            "(unittest.mock.MagicMock) -> pyannotate_runtime.collect_types.NoReturnType"
        ],
        "samples": 1
    },
    {
        "path": "src/identify_updates_of_topics/main.py",
        "line": 1139,
        "func_name": "parse_one_folder",
        "type_comments": [
            "(sqlalchemy.engine.base.Engine, int) -> Tuple[List[List[Union[int, str]]], List[identify_updates_of_topics.main.SearchSummary]]",
            "(sqlalchemy.engine.base.Engine, unittest.mock.MagicMock) -> Tuple[List, List]",
            "(sqlalchemy.engine.base.Engine, str) -> Tuple[List, List]"
        ],
        "samples": 5
    },
    {
        "path": "src/identify_updates_of_topics/main.py",
        "line": 1288,
        "func_name": "visibility_check",
        "type_comments": [
            "(unittest.mock.MagicMock, unittest.mock.MagicMock) -> pyannotate_runtime.collect_types.NoReturnType",
            "(unittest.mock.MagicMock, unittest.mock.MagicMock) -> pyannotate_runtime.collect_types.NoReturnType",
            "(unittest.mock.MagicMock, unittest.mock.MagicMock) -> pyannotate_runtime.collect_types.NoReturnType",
            "(unittest.mock.MagicMock, unittest.mock.MagicMock) -> pyannotate_runtime.collect_types.NoReturnType",
            "(unittest.mock.MagicMock, int) -> bool"
        ],
        "samples": 5
    },
    {
        "path": "src/identify_updates_of_topics/main.py",
        "line": 1311,
        "func_name": "parse_one_comment",
        "type_comments": [
            "(sqlalchemy.engine.base.Engine, unittest.mock.MagicMock, unittest.mock.MagicMock) -> pyannotate_runtime.collect_types.NoReturnType"
        ],
        "samples": 1
    },
    {
        "path": "src/identify_updates_of_topics/main.py",
        "line": 1426,
        "func_name": "update_change_log_and_searches",
        "type_comments": [
            "(sqlalchemy.engine.base.Engine, unittest.mock.MagicMock) -> pyannotate_runtime.collect_types.NoReturnType",
            "(sqlalchemy.engine.base.Engine, int) -> List"
        ],
        "samples": 3
    },
    {
        "path": "src/identify_updates_of_topics/main.py",
        "line": 1783,
        "func_name": "process_one_folder",
        "type_comments": [
            "(sqlalchemy.engine.base.Engine, str) -> Tuple[bool, List]",
            "(sqlalchemy.engine.base.Engine, int) -> Tuple[bool, List]"
        ],
        "samples": 3
    },
    {
        "path": "src/identify_updates_of_topics/main.py",
        "line": 1786,
        "func_name": "update_checker",
        "type_comments": [
            "(str, int) -> bool"
        ],
        "samples": 2
    },
    {
        "path": "src/identify_updates_of_topics/main.py",
        "line": 1808,
        "func_name": "rewrite_snapshot_in_sql",
        "type_comments": [
            "(sqlalchemy.engine.base.Engine, int, List[identify_updates_of_topics.main.SearchSummary]) -> None"
        ],
        "samples": 2
    },
    {
        "path": "src/identify_updates_of_topics/main.py",
        "line": 1877,
        "func_name": "get_the_list_of_ignored_folders",
        "type_comments": [
            "(sqlalchemy.engine.base.Engine) -> List"
        ],
        "samples": 3
    },
    {
        "path": "src/identify_updates_of_topics/main.py",
        "line": 1891,
        "func_name": "save_function_into_register",
        "type_comments": [
            "(sqlalchemy.engine.base.Engine, unittest.mock.MagicMock, unittest.mock.MagicMock, unittest.mock.MagicMock, unittest.mock.MagicMock) -> None",
            "(sqlalchemy.engine.base.Engine, str, datetime.datetime, int, List) -> None"
        ],
        "samples": 2
    },
    {
        "path": "src/identify_updates_of_topics/main.py",
        "line": 1922,
        "func_name": "main",
        "type_comments": [
            "(unittest.mock.MagicMock, unittest.mock.MagicMock) -> pyannotate_runtime.collect_types.NoReturnType",
            "(Dict[str, bytes], str) -> pyannotate_runtime.collect_types.NoReturnType",
            "(Dict[str, bytes], str) -> None"
        ],
        "samples": 3
    },
    {
        "path": "src/manage_topics/main.py",
        "line": 14,
        "func_name": "sql_connect",
        "type_comments": [
            "() -> sqlalchemy.engine.base.Engine"
        ],
        "samples": 5
    },
    {
        "path": "src/manage_topics/main.py",
        "line": 18,
        "func_name": "save_visibility_for_topic",
        "type_comments": [
            "(int, bool) -> None"
        ],
        "samples": 2
    },
    {
        "path": "src/manage_topics/main.py",
        "line": 55,
        "func_name": "save_status_for_topic",
        "type_comments": [
            "(int, str) -> int"
        ],
        "samples": 2
    },
    {
        "path": "src/manage_topics/main.py",
        "line": 102,
        "func_name": "save_function_into_register",
        "type_comments": [
            "(str, datetime.datetime, int, int) -> None"
        ],
        "samples": 2
    },
    {
        "path": "src/manage_topics/main.py",
        "line": 136,
        "func_name": "main",
        "type_comments": [
            "(unittest.mock.MagicMock, unittest.mock.MagicMock) -> str",
            "(Dict[str, bytes], str) -> str"
        ],
        "samples": 2
    },
    {
        "path": "src/manage_users/main.py",
        "line": 10,
        "func_name": "save_onboarding_step",
        "type_comments": [
            "(int, str, datetime.datetime) -> None"
        ],
        "samples": 1
    },
    {
        "path": "src/manage_users/main.py",
        "line": 46,
        "func_name": "save_updated_status_for_user",
        "type_comments": [
            "(str, int, datetime.datetime) -> pyannotate_runtime.collect_types.NoReturnType"
        ],
        "samples": 1
    },
    {
        "path": "src/manage_users/main.py",
        "line": 80,
        "func_name": "save_new_user",
        "type_comments": [
            "(int, str, datetime.datetime) -> None"
        ],
        "samples": 1
    },
    {
        "path": "src/manage_users/main.py",
        "line": 125,
        "func_name": "save_default_notif_settings",
        "type_comments": [
            "(int) -> None"
        ],
        "samples": 1
    },
    {
        "path": "src/manage_users/main.py",
        "line": 169,
        "func_name": "main",
        "type_comments": [
            "(Dict[str, bytes], str) -> str",
            "(unittest.mock.MagicMock, str) -> str",
            "(unittest.mock.MagicMock, str) -> str"
        ],
        "samples": 3
    },
    {
        "path": "src/send_debug_to_admin/main.py",
        "line": 18,
        "func_name": "send_message",
        "type_comments": [
            "(int, str) -> None"
        ],
        "samples": 5
    },
    {
        "path": "src/send_debug_to_admin/main.py",
        "line": 45,
        "func_name": "main",
        "type_comments": [
            "(Dict[str, bytes], str) -> None"
        ],
        "samples": 5
    },
    {
        "path": "src/send_notifications/main.py",
        "line": 51,
        "func_name": "check_for_notifs_to_send",
        "type_comments": [
            "(psycopg2.extensions.cursor) -> None"
        ],
        "samples": 5
    },
    {
        "path": "src/send_notifications/main.py",
        "line": 112,
        "func_name": "check_for_number_of_notifs_to_send",
        "type_comments": [
            "(psycopg2.extensions.cursor) -> int"
        ],
        "samples": 3
    },
    {
        "path": "src/send_notifications/main.py",
        "line": 140,
        "func_name": "send_single_message",
        "type_comments": [
            "(unittest.mock.MagicMock, unittest.mock.MagicMock, unittest.mock.MagicMock, unittest.mock.MagicMock, unittest.mock.MagicMock, unittest.mock.MagicMock, unittest.mock.MagicMock) -> str"
        ],
        "samples": 1
    },
    {
        "path": "src/send_notifications/main.py",
        "line": 160,
        "func_name": "iterate_over_notifications",
        "type_comments": [
            "(str, str, datetime.datetime, unittest.mock.MagicMock, int) -> List",
            "(str, int, datetime.datetime, unittest.mock.MagicMock, int) -> List"
        ],
        "samples": 2
    },
    {
        "path": "src/send_notifications/main.py",
        "line": 310,
        "func_name": "finish_time_analytics",
        "type_comments": [
            "(unittest.mock.MagicMock, unittest.mock.MagicMock, unittest.mock.MagicMock, unittest.mock.MagicMock) -> pyannotate_runtime.collect_types.NoReturnType",
            "(List, List, List[int], List) -> None"
        ],
        "samples": 2
    },
    {
        "path": "src/send_notifications/main.py",
        "line": 364,
        "func_name": "main",
        "type_comments": [
            "(unittest.mock.MagicMock, unittest.mock.MagicMock) -> pyannotate_runtime.collect_types.NoReturnType",
            "(unittest.mock.MagicMock, str) -> str"
        ],
        "samples": 2
    },
    {
        "path": "src/send_notifications_helper/main.py",
        "line": 50,
        "func_name": "check_first_notif_to_send",
        "type_comments": [
            "(psycopg2.extensions.cursor) -> None"
        ],
        "samples": 3
    },
    {
        "path": "src/send_notifications_helper/main.py",
        "line": 98,
        "func_name": "check_for_notifs_to_send",
        "type_comments": [
            "(unittest.mock.MagicMock, unittest.mock.MagicMock) -> unittest.mock.MagicMock"
        ],
        "samples": 1
    },
    {
        "path": "src/send_notifications_helper/main.py",
        "line": 160,
        "func_name": "send_single_message",
        "type_comments": [
            "(unittest.mock.MagicMock, unittest.mock.MagicMock, unittest.mock.MagicMock, unittest.mock.MagicMock, unittest.mock.MagicMock, unittest.mock.MagicMock, unittest.mock.MagicMock) -> str"
        ],
        "samples": 1
    },
    {
        "path": "src/send_notifications_helper/main.py",
        "line": 205,
        "func_name": "iterate_over_notifications",
        "type_comments": [
            "(str, str, datetime.datetime, unittest.mock.MagicMock, int) -> List",
            "(str, int, datetime.datetime, unittest.mock.MagicMock, int) -> List"
        ],
        "samples": 2
    },
    {
        "path": "src/send_notifications_helper/main.py",
        "line": 357,
        "func_name": "finish_time_analytics",
        "type_comments": [
            "(unittest.mock.MagicMock, unittest.mock.MagicMock, unittest.mock.MagicMock, unittest.mock.MagicMock) -> pyannotate_runtime.collect_types.NoReturnType",
            "(List, List, List, List) -> None"
        ],
        "samples": 2
    },
    {
        "path": "src/send_notifications_helper/main.py",
        "line": 411,
        "func_name": "main",
        "type_comments": [
            "(unittest.mock.MagicMock, unittest.mock.MagicMock) -> pyannotate_runtime.collect_types.NoReturnType",
            "(unittest.mock.MagicMock, str) -> str"
        ],
        "samples": 2
    },
    {
        "path": "src/send_notifications_helper_2/main.py",
        "line": 52,
        "func_name": "check_first_notif_to_send",
        "type_comments": [
            "(psycopg2.extensions.cursor) -> None"
        ],
        "samples": 3
    },
    {
        "path": "src/send_notifications_helper_2/main.py",
        "line": 100,
        "func_name": "check_for_notifs_to_send",
        "type_comments": [
            "(unittest.mock.MagicMock, unittest.mock.MagicMock) -> unittest.mock.MagicMock"
        ],
        "samples": 1
    },
    {
        "path": "src/send_notifications_helper_2/main.py",
        "line": 162,
        "func_name": "send_single_message",
        "type_comments": [
            "(unittest.mock.MagicMock, unittest.mock.MagicMock, unittest.mock.MagicMock, unittest.mock.MagicMock, unittest.mock.MagicMock, unittest.mock.MagicMock, unittest.mock.MagicMock) -> str"
        ],
        "samples": 1
    },
    {
        "path": "src/send_notifications_helper_2/main.py",
        "line": 207,
        "func_name": "iterate_over_notifications",
        "type_comments": [
            "(unittest.mock.MagicMock, unittest.mock.MagicMock, unittest.mock.MagicMock, unittest.mock.MagicMock, unittest.mock.MagicMock) -> List",
            "(str, int, datetime.datetime, unittest.mock.MagicMock, int) -> List"
        ],
        "samples": 2
    },
    {
        "path": "src/send_notifications_helper_2/main.py",
        "line": 357,
        "func_name": "finish_time_analytics",
        "type_comments": [
            "(unittest.mock.MagicMock, unittest.mock.MagicMock, unittest.mock.MagicMock, unittest.mock.MagicMock) -> pyannotate_runtime.collect_types.NoReturnType",
            "(List, List, List, List) -> None"
        ],
        "samples": 2
    },
    {
        "path": "src/send_notifications_helper_2/main.py",
        "line": 411,
        "func_name": "main",
        "type_comments": [
            "(unittest.mock.MagicMock, unittest.mock.MagicMock) -> pyannotate_runtime.collect_types.NoReturnType",
            "(unittest.mock.MagicMock, str) -> str"
        ],
        "samples": 2
    },
    {
        "path": "src/title_recognize/main.py",
        "line": 17,
        "func_name": "get_requested_title",
        "type_comments": [
            "(flask.wrappers.Request) -> Tuple[None, None]",
            "(unittest.mock.MagicMock) -> Tuple[None, None]",
            "(flask.wrappers.Request) -> Tuple[str, None]",
            "(unittest.mock.MagicMock) -> Tuple[None, None]"
        ],
        "samples": 4
    },
    {
        "path": "src/title_recognize/main.py",
        "line": 36,
        "func_name": "recognize_title",
        "type_comments": [
            "(str, str) -> Dict[str, str]",
            "(str, None) -> Dict[str, Union[Dict[str, Union[int, str]], List[Dict[str, str]], str]]"
        ],
        "samples": 5
    },
    {
        "path": "src/title_recognize/main.py",
        "line": 39,
        "func_name": "Block",
        "type_comments": [
            "() -> None"
        ],
        "samples": 5
    },
    {
        "path": "src/title_recognize/main.py",
        "line": 40,
        "func_name": "Block.__init__",
        "type_comments": [
            "(None, None, None, None, bool) -> None"
        ],
        "samples": 6
    },
    {
        "path": "src/title_recognize/main.py",
        "line": 52,
        "func_name": "PersonGroup",
        "type_comments": [
            "() -> None"
        ],
        "samples": 5
    },
    {
        "path": "src/title_recognize/main.py",
        "line": 53,
        "func_name": "PersonGroup.__init__",
        "type_comments": [
            "(None, None, None, None, None, None, None, None, None) -> None"
        ],
        "samples": 5
    },
    {
        "path": "src/title_recognize/main.py",
        "line": 78,
        "func_name": "TitleRecognition",
        "type_comments": [
            "() -> None"
        ],
        "samples": 5
    },
    {
        "path": "src/title_recognize/main.py",
        "line": 79,
        "func_name": "TitleRecognition.__init__",
        "type_comments": [
            "(None, None, None, None, None, None, None, None, None, None, None, None) -> None"
        ],
        "samples": 5
    },
    {
        "path": "src/title_recognize/main.py",
        "line": 112,
        "func_name": "match_type_to_pattern",
        "type_comments": [
            "(str) -> Tuple[List[str], str]",
            "(str) -> List[List[str]]"
        ],
        "samples": 6
    },
    {
        "path": "src/title_recognize/main.py",
        "line": 368,
        "func_name": "recognize_a_pattern",
        "type_comments": [
            "(str, str) -> Tuple[None, None]"
        ],
        "samples": 5
    },
    {
        "path": "src/title_recognize/main.py",
        "line": 404,
        "func_name": "clean_and_prettify",
        "type_comments": [
            "(str) -> str"
        ],
        "samples": 5
    },
    {
        "path": "src/title_recognize/main.py",
        "line": 414,
        "func_name": "update_full_blocks_with_new",
        "type_comments": [
            "(int, title_recognize.main:recognize_title.<locals>.TitleRecognition, None) -> List[title_recognize.main:recognize_title.<locals>.Block]",
            "(int, title_recognize.main:recognize_title.<locals>.TitleRecognition, None) -> List[title_recognize.main:recognize_title.<locals>.Block]"
        ],
        "samples": 6
    },
    {
        "path": "src/title_recognize/main.py",
        "line": 453,
        "func_name": "split_status_training_activity",
        "type_comments": [
            "(str, str) -> title_recognize.main:recognize_title.<locals>.TitleRecognition",
            "(str, str) -> title_recognize.main:recognize_title.<locals>.TitleRecognition",
            "(str, str) -> title_recognize.main:recognize_title.<locals>.TitleRecognition",
            "(str, str) -> title_recognize.main:recognize_title.<locals>.TitleRecognition",
            "(str, str) -> title_recognize.main:recognize_title.<locals>.TitleRecognition"
        ],
        "samples": 5
    },
    {
        "path": "src/title_recognize/main.py",
        "line": 509,
        "func_name": "check_word_by_natasha",
        "type_comments": [
            "(str, str) -> bool"
        ],
        "samples": 2
    },
    {
        "path": "src/title_recognize/main.py",
        "line": 542,
        "func_name": "update_reco_with_per_and_loc_blocks",
        "type_comments": [
            "(title_recognize.main:recognize_title.<locals>.TitleRecognition, str, title_recognize.main:recognize_title.<locals>.Block, int) -> title_recognize.main:recognize_title.<locals>.TitleRecognition",
            "(title_recognize.main:recognize_title.<locals>.TitleRecognition, str, title_recognize.main:recognize_title.<locals>.Block, int) -> title_recognize.main:recognize_title.<locals>.TitleRecognition",
            "(title_recognize.main:recognize_title.<locals>.TitleRecognition, str, title_recognize.main:recognize_title.<locals>.Block, int) -> title_recognize.main:recognize_title.<locals>.TitleRecognition",
            "(title_recognize.main:recognize_title.<locals>.TitleRecognition, str, title_recognize.main:recognize_title.<locals>.Block, int) -> title_recognize.main:recognize_title.<locals>.TitleRecognition",
            "(title_recognize.main:recognize_title.<locals>.TitleRecognition, str, title_recognize.main:recognize_title.<locals>.Block, int) -> title_recognize.main:recognize_title.<locals>.TitleRecognition"
        ],
        "samples": 5
    },
    {
        "path": "src/title_recognize/main.py",
        "line": 567,
        "func_name": "split_per_from_loc_blocks",
        "type_comments": [
            "(title_recognize.main:recognize_title.<locals>.TitleRecognition) -> title_recognize.main:recognize_title.<locals>.TitleRecognition",
            "(title_recognize.main:recognize_title.<locals>.TitleRecognition) -> title_recognize.main:recognize_title.<locals>.TitleRecognition",
            "(title_recognize.main:recognize_title.<locals>.TitleRecognition) -> title_recognize.main:recognize_title.<locals>.TitleRecognition",
            "(title_recognize.main:recognize_title.<locals>.TitleRecognition) -> title_recognize.main:recognize_title.<locals>.TitleRecognition",
            "(title_recognize.main:recognize_title.<locals>.TitleRecognition) -> title_recognize.main:recognize_title.<locals>.TitleRecognition"
        ],
        "samples": 5
    },
    {
        "path": "src/title_recognize/main.py",
        "line": 664,
        "func_name": "split_per_and_loc_blocks_to_groups",
        "type_comments": [
            "(title_recognize.main:recognize_title.<locals>.TitleRecognition) -> title_recognize.main:recognize_title.<locals>.TitleRecognition",
            "(title_recognize.main:recognize_title.<locals>.TitleRecognition) -> title_recognize.main:recognize_title.<locals>.TitleRecognition",
            "(title_recognize.main:recognize_title.<locals>.TitleRecognition) -> title_recognize.main:recognize_title.<locals>.TitleRecognition",
            "(title_recognize.main:recognize_title.<locals>.TitleRecognition) -> title_recognize.main:recognize_title.<locals>.TitleRecognition",
            "(title_recognize.main:recognize_title.<locals>.TitleRecognition) -> title_recognize.main:recognize_title.<locals>.TitleRecognition"
        ],
        "samples": 5
    },
    {
        "path": "src/title_recognize/main.py",
        "line": 709,
        "func_name": "age_wording",
        "type_comments": [
            "(int) -> str"
        ],
        "samples": 5
    },
    {
        "path": "src/title_recognize/main.py",
        "line": 726,
        "func_name": "define_person_display_name_and_age",
        "type_comments": [
            "(title_recognize.main:recognize_title.<locals>.TitleRecognition) -> title_recognize.main:recognize_title.<locals>.TitleRecognition",
            "(title_recognize.main:recognize_title.<locals>.TitleRecognition) -> title_recognize.main:recognize_title.<locals>.TitleRecognition",
            "(title_recognize.main:recognize_title.<locals>.TitleRecognition) -> title_recognize.main:recognize_title.<locals>.TitleRecognition",
            "(title_recognize.main:recognize_title.<locals>.TitleRecognition) -> title_recognize.main:recognize_title.<locals>.TitleRecognition",
            "(title_recognize.main:recognize_title.<locals>.TitleRecognition) -> title_recognize.main:recognize_title.<locals>.TitleRecognition"
        ],
        "samples": 5
    },
    {
        "path": "src/title_recognize/main.py",
        "line": 729,
        "func_name": "define_number_of_persons",
        "type_comments": [
            "(str) -> Tuple[int, re.Match]"
        ],
        "samples": 5
    },
    {
        "path": "src/title_recognize/main.py",
        "line": 780,
        "func_name": "define_age_of_person",
        "type_comments": [
            "(re.Match, str, title_recognize.main:recognize_title.<locals>.PersonGroup) -> title_recognize.main:recognize_title.<locals>.PersonGroup",
            "(re.Match, str, title_recognize.main:recognize_title.<locals>.PersonGroup) -> title_recognize.main:recognize_title.<locals>.PersonGroup",
            "(re.Match, str, title_recognize.main:recognize_title.<locals>.PersonGroup) -> title_recognize.main:recognize_title.<locals>.PersonGroup",
            "(re.Match, str, title_recognize.main:recognize_title.<locals>.PersonGroup) -> title_recognize.main:recognize_title.<locals>.PersonGroup",
            "(re.Match, str, title_recognize.main:recognize_title.<locals>.PersonGroup) -> title_recognize.main:recognize_title.<locals>.PersonGroup"
        ],
        "samples": 5
    },
    {
        "path": "src/title_recognize/main.py",
        "line": 851,
        "func_name": "define_display_name",
        "type_comments": [
            "(re.Match, title_recognize.main:recognize_title.<locals>.PersonGroup) -> title_recognize.main:recognize_title.<locals>.PersonGroup",
            "(re.Match, title_recognize.main:recognize_title.<locals>.PersonGroup) -> title_recognize.main:recognize_title.<locals>.PersonGroup",
            "(re.Match, title_recognize.main:recognize_title.<locals>.PersonGroup) -> title_recognize.main:recognize_title.<locals>.PersonGroup",
            "(re.Match, title_recognize.main:recognize_title.<locals>.PersonGroup) -> title_recognize.main:recognize_title.<locals>.PersonGroup",
            "(re.Match, title_recognize.main:recognize_title.<locals>.PersonGroup) -> title_recognize.main:recognize_title.<locals>.PersonGroup"
        ],
        "samples": 5
    },
    {
        "path": "src/title_recognize/main.py",
        "line": 875,
        "func_name": "define_age_of_person_by_natasha",
        "type_comments": [
            "(title_recognize.main:recognize_title.<locals>.PersonGroup, str) -> title_recognize.main:recognize_title.<locals>.PersonGroup",
            "(title_recognize.main:recognize_title.<locals>.PersonGroup, str) -> title_recognize.main:recognize_title.<locals>.PersonGroup",
            "(title_recognize.main:recognize_title.<locals>.PersonGroup, str) -> title_recognize.main:recognize_title.<locals>.PersonGroup",
            "(title_recognize.main:recognize_title.<locals>.PersonGroup, str) -> title_recognize.main:recognize_title.<locals>.PersonGroup",
            "(title_recognize.main:recognize_title.<locals>.PersonGroup, str) -> title_recognize.main:recognize_title.<locals>.PersonGroup"
        ],
        "samples": 5
    },
    {
        "path": "src/title_recognize/main.py",
        "line": 894,
        "func_name": "recognize_one_person_group",
        "type_comments": [
            "(title_recognize.main:recognize_title.<locals>.Block) -> title_recognize.main:recognize_title.<locals>.PersonGroup",
            "(title_recognize.main:recognize_title.<locals>.Block) -> title_recognize.main:recognize_title.<locals>.PersonGroup",
            "(title_recognize.main:recognize_title.<locals>.Block) -> title_recognize.main:recognize_title.<locals>.PersonGroup",
            "(title_recognize.main:recognize_title.<locals>.Block) -> title_recognize.main:recognize_title.<locals>.PersonGroup",
            "(title_recognize.main:recognize_title.<locals>.Block) -> title_recognize.main:recognize_title.<locals>.PersonGroup"
        ],
        "samples": 5
    },
    {
        "path": "src/title_recognize/main.py",
        "line": 1054,
        "func_name": "define_person_block_display_name_and_age_range",
        "type_comments": [
            "(title_recognize.main:recognize_title.<locals>.TitleRecognition) -> title_recognize.main:recognize_title.<locals>.TitleRecognition",
            "(title_recognize.main:recognize_title.<locals>.TitleRecognition) -> title_recognize.main:recognize_title.<locals>.TitleRecognition",
            "(title_recognize.main:recognize_title.<locals>.TitleRecognition) -> title_recognize.main:recognize_title.<locals>.TitleRecognition",
            "(title_recognize.main:recognize_title.<locals>.TitleRecognition) -> title_recognize.main:recognize_title.<locals>.TitleRecognition",
            "(title_recognize.main:recognize_title.<locals>.TitleRecognition) -> title_recognize.main:recognize_title.<locals>.TitleRecognition"
        ],
        "samples": 5
    },
    {
        "path": "src/title_recognize/main.py",
        "line": 1144,
        "func_name": "prettify_loc_group_address",
        "type_comments": [
            "(title_recognize.main:recognize_title.<locals>.TitleRecognition) -> title_recognize.main:recognize_title.<locals>.TitleRecognition",
            "(title_recognize.main:recognize_title.<locals>.TitleRecognition) -> title_recognize.main:recognize_title.<locals>.TitleRecognition",
            "(title_recognize.main:recognize_title.<locals>.TitleRecognition) -> title_recognize.main:recognize_title.<locals>.TitleRecognition",
            "(title_recognize.main:recognize_title.<locals>.TitleRecognition) -> title_recognize.main:recognize_title.<locals>.TitleRecognition",
            "(title_recognize.main:recognize_title.<locals>.TitleRecognition) -> title_recognize.main:recognize_title.<locals>.TitleRecognition"
        ],
        "samples": 5
    },
    {
        "path": "src/title_recognize/main.py",
        "line": 1154,
        "func_name": "define_loc_block_summary",
        "type_comments": [
            "(title_recognize.main:recognize_title.<locals>.TitleRecognition) -> title_recognize.main:recognize_title.<locals>.TitleRecognition",
            "(title_recognize.main:recognize_title.<locals>.TitleRecognition) -> title_recognize.main:recognize_title.<locals>.TitleRecognition",
            "(title_recognize.main:recognize_title.<locals>.TitleRecognition) -> title_recognize.main:recognize_title.<locals>.TitleRecognition",
            "(title_recognize.main:recognize_title.<locals>.TitleRecognition) -> title_recognize.main:recognize_title.<locals>.TitleRecognition",
            "(title_recognize.main:recognize_title.<locals>.TitleRecognition) -> title_recognize.main:recognize_title.<locals>.TitleRecognition"
        ],
        "samples": 5
    },
    {
        "path": "src/title_recognize/main.py",
        "line": 1172,
        "func_name": "define_general_status",
        "type_comments": [
            "(title_recognize.main:recognize_title.<locals>.TitleRecognition) -> title_recognize.main:recognize_title.<locals>.TitleRecognition",
            "(title_recognize.main:recognize_title.<locals>.TitleRecognition) -> title_recognize.main:recognize_title.<locals>.TitleRecognition",
            "(title_recognize.main:recognize_title.<locals>.TitleRecognition) -> title_recognize.main:recognize_title.<locals>.TitleRecognition",
            "(title_recognize.main:recognize_title.<locals>.TitleRecognition) -> title_recognize.main:recognize_title.<locals>.TitleRecognition",
            "(title_recognize.main:recognize_title.<locals>.TitleRecognition) -> title_recognize.main:recognize_title.<locals>.TitleRecognition"
        ],
        "samples": 5
    },
    {
        "path": "src/title_recognize/main.py",
        "line": 1221,
        "func_name": "calculate_total_num_of_persons",
        "type_comments": [
            "(title_recognize.main:recognize_title.<locals>.TitleRecognition) -> title_recognize.main:recognize_title.<locals>.TitleRecognition",
            "(title_recognize.main:recognize_title.<locals>.TitleRecognition) -> title_recognize.main:recognize_title.<locals>.TitleRecognition",
            "(title_recognize.main:recognize_title.<locals>.TitleRecognition) -> title_recognize.main:recognize_title.<locals>.TitleRecognition",
            "(title_recognize.main:recognize_title.<locals>.TitleRecognition) -> title_recognize.main:recognize_title.<locals>.TitleRecognition",
            "(title_recognize.main:recognize_title.<locals>.TitleRecognition) -> title_recognize.main:recognize_title.<locals>.TitleRecognition"
        ],
        "samples": 5
    },
    {
        "path": "src/title_recognize/main.py",
        "line": 1285,
        "func_name": "generate_final_reco_dict",
        "type_comments": [
            "(title_recognize.main:recognize_title.<locals>.TitleRecognition) -> Dict[str, Union[Dict[str, Union[int, str]], List[Dict[str, str]], str]]",
            "(title_recognize.main:recognize_title.<locals>.TitleRecognition) -> Dict[str, Union[Dict[str, Union[int, str]], List[Dict[str, str]], str]]",
            "(title_recognize.main:recognize_title.<locals>.TitleRecognition) -> Dict[str, str]",
            "(title_recognize.main:recognize_title.<locals>.TitleRecognition) -> Dict[str, Union[Dict[str, Union[int, str]], List[Dict[str, str]], str]]",
            "(title_recognize.main:recognize_title.<locals>.TitleRecognition) -> Dict[str, Union[Dict[str, Union[int, str]], List[Dict[str, str]], str]]"
        ],
        "samples": 5
    },
    {
        "path": "src/title_recognize/main.py",
        "line": 1453,
        "func_name": "main",
        "type_comments": [
            "(unittest.mock.MagicMock) -> str",
            "(flask.wrappers.Request) -> str"
        ],
        "samples": 3
    },
    {
        "path": "src/user_provide_info/main.py",
        "line": 24,
        "func_name": "verify_telegram_data_json",
        "type_comments": [
            "(unittest.mock.MagicMock, unittest.mock.MagicMock) -> bool",
            "(unittest.mock.MagicMock, str) -> bool",
            "(unittest.mock.MagicMock, unittest.mock.MagicMock) -> bool",
            "(unittest.mock.MagicMock, str) -> bool"
        ],
        "samples": 4
    },
    {
        "path": "src/user_provide_info/main.py",
        "line": 54,
        "func_name": "verify_telegram_data_string",
        "type_comments": [
            "(unittest.mock.MagicMock, unittest.mock.MagicMock) -> pyannotate_runtime.collect_types.NoReturnType"
        ],
        "samples": 1
    },
    {
        "path": "src/user_provide_info/main.py",
        "line": 79,
        "func_name": "verify_telegram_data",
        "type_comments": [
            "(unittest.mock.MagicMock, str) -> bool",
            "(unittest.mock.MagicMock, unittest.mock.MagicMock) -> bool",
            "(unittest.mock.MagicMock, str) -> bool"
        ],
        "samples": 3
    },
    {
        "path": "src/user_provide_info/main.py",
        "line": 89,
        "func_name": "get_user_data_from_db",
        "type_comments": [
            "(int) -> Dict[str, Optional[Union[bool, float, int]]]"
        ],
        "samples": 1
    },
    {
        "path": "src/user_provide_info/main.py",
        "line": 344,
        "func_name": "save_user_statistics_to_db",
        "type_comments": [
            "(int, bool) -> None"
        ],
        "samples": 3
    },
    {
        "path": "src/user_provide_info/main.py",
        "line": 368,
        "func_name": "main",
        "type_comments": [
            "(unittest.mock.MagicMock) -> Tuple[Dict[str, Union[bool, str]], int, Dict[str, str]]",
            "(unittest.mock.MagicMock) -> Tuple[Dict[str, Union[bool, str]], int, Dict[str, str]]"
        ],
        "samples": 2
    },
    {
        "path": "src/users_activate/main.py",
        "line": 14,
        "func_name": "mark_up_onboarding_status_0",
        "type_comments": [
            "(unittest.mock.MagicMock) -> None"
        ],
        "samples": 1
    },
    {
        "path": "src/users_activate/main.py",
        "line": 72,
        "func_name": "mark_up_onboarding_status_0_2",
        "type_comments": [
            "(unittest.mock.MagicMock) -> None"
        ],
        "samples": 1
    },
    {
        "path": "src/users_activate/main.py",
        "line": 115,
        "func_name": "mark_up_onboarding_status_10",
        "type_comments": [
            "(unittest.mock.MagicMock) -> None"
        ],
        "samples": 1
    },
    {
        "path": "src/users_activate/main.py",
        "line": 151,
        "func_name": "mark_up_onboarding_status_10_2",
        "type_comments": [
            "(unittest.mock.MagicMock) -> None"
        ],
        "samples": 1
    },
    {
        "path": "src/users_activate/main.py",
        "line": 193,
        "func_name": "mark_up_onboarding_status_20",
        "type_comments": [
            "(unittest.mock.MagicMock) -> None"
        ],
        "samples": 1
    },
    {
        "path": "src/users_activate/main.py",
        "line": 229,
        "func_name": "mark_up_onboarding_status_21",
        "type_comments": [
            "(unittest.mock.MagicMock) -> None"
        ],
        "samples": 1
    },
    {
        "path": "src/users_activate/main.py",
        "line": 260,
        "func_name": "mark_up_onboarding_status_80",
        "type_comments": [
            "(unittest.mock.MagicMock) -> None"
        ],
        "samples": 1
    },
    {
        "path": "src/users_activate/main.py",
        "line": 296,
        "func_name": "mark_up_onboarding_status_80_patch",
        "type_comments": [
            "(unittest.mock.MagicMock) -> None"
        ],
        "samples": 1
    },
    {
        "path": "src/users_activate/main.py",
        "line": 330,
        "func_name": "mark_up_onboarding_status_80_wo_dialogs",
        "type_comments": [
            "(unittest.mock.MagicMock) -> None"
        ],
        "samples": 1
    },
    {
        "path": "src/users_activate/main.py",
        "line": 361,
        "func_name": "mark_up_onboarding_status_80_just_got_summaries",
        "type_comments": [
            "(unittest.mock.MagicMock) -> None"
        ],
        "samples": 1
    },
    {
        "path": "src/users_activate/main.py",
        "line": 393,
        "func_name": "mark_up_onboarding_status_80_have_all_settings",
        "type_comments": [
            "(unittest.mock.MagicMock) -> None"
        ],
        "samples": 1
    },
    {
        "path": "src/users_activate/main.py",
        "line": 425,
        "func_name": "mark_up_onboarding_status_80_self_deactivated",
        "type_comments": [
            "(unittest.mock.MagicMock) -> None"
        ],
        "samples": 1
    },
    {
        "path": "src/users_activate/main.py",
        "line": 471,
        "func_name": "mark_up_onboarding_status_99",
        "type_comments": [
            "(unittest.mock.MagicMock) -> None"
        ],
        "samples": 1
    },
    {
        "path": "src/users_activate/main.py",
        "line": 510,
        "func_name": "main",
        "type_comments": [
            "(unittest.mock.MagicMock, unittest.mock.MagicMock) -> str",
            "(unittest.mock.MagicMock, str) -> str"
        ],
        "samples": 2
    },
    {
        "path": "tests/common.py",
        "line": 20,
        "func_name": "get_test_config",
        "type_comments": [
            "() -> tests.common.AppTestConfig"
        ],
        "samples": 1
    },
    {
        "path": "tests/common.py",
        "line": 26,
        "func_name": "get_event_with_data",
        "type_comments": [
            "(Tuple[int, str]) -> Dict[str, bytes]",
            "(str) -> Dict[str, bytes]",
            "(Dict[str, Union[bool, int, str]]) -> Dict[str, bytes]"
        ],
        "samples": 5
    },
    {
        "path": "tests/common.py",
        "line": 32,
        "func_name": "_get_default_arg_value",
        "type_comments": [
            "(inspect.Parameter) -> unittest.mock.MagicMock",
            "(inspect.Parameter) -> unittest.mock.MagicMock",
            "(inspect.Parameter) -> float",
            "(inspect.Parameter) -> str",
            "(inspect.Parameter) -> sqlalchemy.engine.base.Engine",
            "(inspect.Parameter) -> unittest.mock.MagicMock",
            "(inspect.Parameter) -> psycopg2.extensions.cursor",
            "(inspect.Parameter) -> int"
        ],
        "samples": 15
    },
    {
        "path": "tests/common.py",
        "line": 79,
        "func_name": "generate_args_for_function",
        "type_comments": [
            "(function) -> Dict[str, unittest.mock.MagicMock]",
            "(function) -> Dict",
            "(function) -> Dict[str, Union[int, str]]",
            "(function) -> Dict[str, Union[List, int]]",
            "(function) -> Dict[str, unittest.mock.MagicMock]",
            "(function) -> Dict[str, unittest.mock.MagicMock]",
            "(function) -> Dict[str, Union[datetime.datetime, int, str, unittest.mock.MagicMock]]",
            "(function) -> Dict[str, Union[int, psycopg2.extensions.cursor]]"
        ],
        "samples": 9
    },
    {
        "path": "tests/common.py",
        "line": 85,
        "func_name": "run_smoke",
        "type_comments": [
            "(function) -> unittest.mock.MagicMock",
            "(function) -> Tuple[str, str]",
            "(function) -> List[int]",
            "(function) -> None",
            "(function) -> str",
            "(function) -> bool",
            "(function) -> List"
        ],
        "samples": 9
    },
    {
        "path": "tests/common.py",
        "line": 104,
        "func_name": "topic_to_receiver_function",
        "type_comments": [
            "(str) -> pyannotate_runtime.collect_types.NoReturnType",
            "(_dependencies.commons.Topics) -> function"
        ],
        "samples": 5
    },
    {
        "path": "tests/conftest.py",
        "line": 27,
        "func_name": "patch_app_config",
        "type_comments": [
            "(None) -> Iterator",
            "(None) -> Iterator"
        ],
        "samples": 16
    },
    {
        "path": "tests/conftest.py",
        "line": 35,
        "func_name": "patch_publish_topic",
        "type_comments": [
            "() -> Iterator",
            "() -> Iterator"
        ],
        "samples": 16
    },
    {
        "path": "tests/conftest.py",
        "line": 37,
        "func_name": "patched_send_topic",
        "type_comments": [
            "(_dependencies.commons.Topics, unittest.mock.MagicMock, bytes) -> None",
            "(str, unittest.mock.MagicMock, bytes) -> pyannotate_runtime.collect_types.NoReturnType"
        ],
        "samples": 5
    },
    {
        "path": "tests/conftest.py",
        "line": 45,
        "func_name": "patch_http",
        "type_comments": [
            "() -> Iterator",
            "() -> Iterator"
        ],
        "samples": 16
    },
    {
        "path": "tests/conftest.py",
        "line": 60,
        "func_name": "patch_pubsub_client",
        "type_comments": [
            "() -> Iterator[unittest.mock.MagicMock]",
            "() -> Iterator[unittest.mock.MagicMock]",
            "() -> Iterator[unittest.mock.MagicMock]",
            "() -> Iterator",
            "() -> Iterator[unittest.mock.MagicMock]",
            "() -> Iterator[unittest.mock.MagicMock]",
            "() -> Iterator[unittest.mock.MagicMock]",
            "() -> Iterator[unittest.mock.MagicMock]"
        ],
        "samples": 16
    },
    {
        "path": "tests/conftest.py",
        "line": 66,
        "func_name": "bot_mock_send_message",
        "type_comments": [
            "() -> Iterator[unittest.mock.AsyncMock]",
            "() -> Iterator[unittest.mock.AsyncMock]",
            "() -> Iterator[unittest.mock.AsyncMock]",
            "() -> Iterator",
            "() -> Iterator[unittest.mock.AsyncMock]",
            "() -> Iterator[unittest.mock.AsyncMock]",
            "() -> Iterator[unittest.mock.AsyncMock]",
            "() -> Iterator[unittest.mock.AsyncMock]"
        ],
        "samples": 16
    },
    {
        "path": "tests/dependencies/test_content.py",
        "line": 4,
        "func_name": "test_clean_up_content",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/dependencies/test_content.py",
        "line": 11,
        "func_name": "test_clean_up_content_2",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/dependencies/test_db_guard.py",
        "line": 19,
        "func_name": "func_name",
        "type_comments": [
            "() -> str"
        ],
        "samples": 3
    },
    {
        "path": "tests/dependencies/test_db_guard.py",
        "line": 24,
        "func_name": "test_check_if_other_functions_are_working",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/dependencies/test_db_guard.py",
        "line": 29,
        "func_name": "test_check_record_start_of_function",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/dependencies/test_db_guard.py",
        "line": 34,
        "func_name": "test_record_finish_of_function",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/dependencies/test_db_guard.py",
        "line": 39,
        "func_name": "test_check_and_save_event_id",
        "type_comments": [
            "(str) -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/dependencies/test_db_guard.py",
        "line": 53,
        "func_name": "test_check_and_save_event_id_blocked",
        "type_comments": [
            "(str) -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/dependencies/test_db_guard.py",
        "line": 70,
        "func_name": "test_record_is_blocked",
        "type_comments": [
            "(str) -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/dependencies/test_misc.py",
        "line": 12,
        "func_name": "test_notify_admin",
        "type_comments": [
            "(unittest.mock.MagicMock, unittest.mock.AsyncMock) -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/dependencies/test_misc.py",
        "line": 19,
        "func_name": "test_make_api_call",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/dependencies/test_misc.py",
        "line": 24,
        "func_name": "test_time_counter_since_search_start",
        "type_comments": [
            "(int, int, int, List[Union[int, str]]) -> None"
        ],
        "samples": 4
    },
    {
        "path": "tests/dependencies/test_misc.py",
        "line": 39,
        "func_name": "test_age_writer",
        "type_comments": [
            "(int, str) -> None"
        ],
        "samples": 4
    },
    {
        "path": "tests/dependencies/test_misc.py",
        "line": 52,
        "func_name": "test_get_change_log_update_time",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/dependencies/test_misc.py",
        "line": 58,
        "func_name": "test_send_location_to_api",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/dependencies/test_misc.py",
        "line": 68,
        "func_name": "test_save_sending_status_to_notif_by_user",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/dependencies/test_misc.py",
        "line": 74,
        "func_name": "test_evaluate_city_locations_success",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/dependencies/test_misc.py",
        "line": 79,
        "func_name": "test_evaluate_city_locations_fail",
        "type_comments": [
            "(List) -> None",
            "(List) -> None",
            "(str) -> None",
            "(List[int]) -> None"
        ],
        "samples": 5
    },
    {
        "path": "tests/dependencies/test_misc.py",
        "line": 94,
        "func_name": "test_process_pubsub_message",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/dependencies/test_misc.py",
        "line": 99,
        "func_name": "test_process_pubsub_message_2",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/dependencies/test_misc.py",
        "line": 104,
        "func_name": "test_process_pubsub_message_3",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_api_get_active_searches_generated.py",
        "line": 7,
        "func_name": "test_get_list_of_active_searches_from_db",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_api_get_active_searches_generated.py",
        "line": 12,
        "func_name": "test_get_list_of_allowed_apps",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_api_get_active_searches_generated.py",
        "line": 17,
        "func_name": "test_main",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_api_get_active_searches_generated.py",
        "line": 22,
        "func_name": "test_save_user_statistics_to_db",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_api_get_active_searches_generated.py",
        "line": 27,
        "func_name": "test_verify_json_validity",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_archive_notifications_generated.py",
        "line": 7,
        "func_name": "test_main",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_archive_notifications_generated.py",
        "line": 12,
        "func_name": "test_move_first_posts_to_history_in_psql",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_archive_notifications_generated.py",
        "line": 17,
        "func_name": "test_move_notifications_to_history_in_psql",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_archive_notifications_generated.py",
        "line": 22,
        "func_name": "test_sql_connect",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_archive_to_bigquery_generated.py",
        "line": 7,
        "func_name": "test_archive_notif_by_user",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_archive_to_bigquery_generated.py",
        "line": 12,
        "func_name": "test_main",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_archive_to_bigquery_generated.py",
        "line": 18,
        "func_name": "test_save_sql_stat_table_sizes",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_archive_to_bigquery_generated.py",
        "line": 23,
        "func_name": "test_sql_connect",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_check_first_posts_for_changes_generated.py",
        "line": 7,
        "func_name": "test_define_topic_visibility_by_content",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_check_first_posts_for_changes_generated.py",
        "line": 12,
        "func_name": "test_define_topic_visibility_by_topic_id",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_check_first_posts_for_changes_generated.py",
        "line": 17,
        "func_name": "test_get_status_from_content_and_send_to_topic_management",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_check_first_posts_for_changes_generated.py",
        "line": 22,
        "func_name": "test_main",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_check_first_posts_for_changes_generated.py",
        "line": 27,
        "func_name": "test_parse_search",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_check_first_posts_for_changes_generated.py",
        "line": 32,
        "func_name": "test_sql_connect",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_check_first_posts_for_changes_generated.py",
        "line": 37,
        "func_name": "test_update_first_posts_and_statuses",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_check_first_posts_for_changes_generated.py",
        "line": 42,
        "func_name": "test_update_one_topic_visibility",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_check_first_posts_for_changes_generated.py",
        "line": 47,
        "func_name": "test_update_visibility_for_one_hidden_topic",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_check_topics_by_upd_time_generated.py",
        "line": 7,
        "func_name": "test_check_updates_in_folder_with_folders",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_check_topics_by_upd_time_generated.py",
        "line": 12,
        "func_name": "test_get_the_list_folders_to_update",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_check_topics_by_upd_time_generated.py",
        "line": 17,
        "func_name": "test_main",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_check_topics_by_upd_time_generated.py",
        "line": 22,
        "func_name": "test_time_delta",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_communicate_generated.py",
        "line": 7,
        "func_name": "test_add_user_sys_role",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_communicate_generated.py",
        "line": 12,
        "func_name": "test_api_callback_edit_inline_keyboard",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_communicate_generated.py",
        "line": 18,
        "func_name": "test_check_if_new_user",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_communicate_generated.py",
        "line": 23,
        "func_name": "test_check_if_user_has_no_regions",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_communicate_generated.py",
        "line": 28,
        "func_name": "test_check_onboarding_step",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_communicate_generated.py",
        "line": 33,
        "func_name": "test_compose_full_message_on_list_of_searches",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_communicate_generated.py",
        "line": 38,
        "func_name": "test_compose_full_message_on_list_of_searches_ikb",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_communicate_generated.py",
        "line": 43,
        "func_name": "test_compose_msg_on_active_searches_in_one_reg",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_communicate_generated.py",
        "line": 48,
        "func_name": "test_compose_msg_on_active_searches_in_one_reg_ikb",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_communicate_generated.py",
        "line": 53,
        "func_name": "test_compose_msg_on_all_last_searches",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_communicate_generated.py",
        "line": 58,
        "func_name": "test_compose_msg_on_all_last_searches_ikb",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_communicate_generated.py",
        "line": 63,
        "func_name": "test_compose_msg_on_user_setting_fullness",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_communicate_generated.py",
        "line": 68,
        "func_name": "test_compose_user_preferences_message",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_communicate_generated.py",
        "line": 73,
        "func_name": "test_delete_last_user_inline_dialogue",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_communicate_generated.py",
        "line": 78,
        "func_name": "test_delete_user_coordinates",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_communicate_generated.py",
        "line": 83,
        "func_name": "test_delete_user_sys_role",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_communicate_generated.py",
        "line": 88,
        "func_name": "test_distance_to_search",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_communicate_generated.py",
        "line": 93,
        "func_name": "test_generate_yandex_maps_place_link",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_communicate_generated.py",
        "line": 98,
        "func_name": "test_get_basic_update_parameters",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_communicate_generated.py",
        "line": 103,
        "func_name": "test_get_coordinates_from_string",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_communicate_generated.py",
        "line": 108,
        "func_name": "test_get_last_bot_message_id",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_communicate_generated.py",
        "line": 113,
        "func_name": "test_get_last_bot_msg",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_communicate_generated.py",
        "line": 118,
        "func_name": "test_get_last_user_inline_dialogue",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_communicate_generated.py",
        "line": 123,
        "func_name": "test_get_param_if_exists",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_communicate_generated.py",
        "line": 128,
        "func_name": "test_get_search_follow_mode",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_communicate_generated.py",
        "line": 133,
        "func_name": "test_get_the_update",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_communicate_generated.py",
        "line": 138,
        "func_name": "test_get_user_reg_folders_preferences",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_communicate_generated.py",
        "line": 143,
        "func_name": "test_get_user_role",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_communicate_generated.py",
        "line": 148,
        "func_name": "test_get_user_sys_roles",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_communicate_generated.py",
        "line": 153,
        "func_name": "test_if_user_enables",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_communicate_generated.py",
        "line": 158,
        "func_name": "test_inline_processing",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_communicate_generated.py",
        "line": 163,
        "func_name": "test_leave_chat_async",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_communicate_generated.py",
        "line": 168,
        "func_name": "test_main",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_communicate_generated.py",
        "line": 173,
        "func_name": "test_make_api_call",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_communicate_generated.py",
        "line": 178,
        "func_name": "test_manage_age",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_communicate_generated.py",
        "line": 184,
        "func_name": "test_manage_if_moscow",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_communicate_generated.py",
        "line": 189,
        "func_name": "test_manage_linking_to_forum",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_communicate_generated.py",
        "line": 194,
        "func_name": "test_manage_radius",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_communicate_generated.py",
        "line": 199,
        "func_name": "test_manage_search_follow_mode",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_communicate_generated.py",
        "line": 205,
        "func_name": "test_manage_search_whiteness",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_communicate_generated.py",
        "line": 211,
        "func_name": "test_manage_topic_type",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_communicate_generated.py",
        "line": 217,
        "func_name": "test_prepare_message_for_leave_chat_async",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_communicate_generated.py",
        "line": 222,
        "func_name": "test_process_block_unblock_user",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_communicate_generated.py",
        "line": 227,
        "func_name": "test_process_leaving_chat_async",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_communicate_generated.py",
        "line": 232,
        "func_name": "test_process_response_of_api_call",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_communicate_generated.py",
        "line": 237,
        "func_name": "test_process_unneeded_messages",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_communicate_generated.py",
        "line": 242,
        "func_name": "test_process_update",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_communicate_generated.py",
        "line": 247,
        "func_name": "test_process_user_coordinates",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_communicate_generated.py",
        "line": 252,
        "func_name": "test_run_onboarding",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_communicate_generated.py",
        "line": 257,
        "func_name": "test_save_bot_reply_to_user",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_communicate_generated.py",
        "line": 262,
        "func_name": "test_save_last_user_inline_dialogue",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_communicate_generated.py",
        "line": 267,
        "func_name": "test_save_new_user",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_communicate_generated.py",
        "line": 272,
        "func_name": "test_save_onboarding_step",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_communicate_generated.py",
        "line": 278,
        "func_name": "test_save_preference",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_communicate_generated.py",
        "line": 283,
        "func_name": "test_save_user_coordinates",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_communicate_generated.py",
        "line": 288,
        "func_name": "test_save_user_message_to_bot",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_communicate_generated.py",
        "line": 293,
        "func_name": "test_save_user_pref_role",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_communicate_generated.py",
        "line": 298,
        "func_name": "test_save_user_pref_topic_type",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_communicate_generated.py",
        "line": 303,
        "func_name": "test_save_user_pref_urgency",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_communicate_generated.py",
        "line": 308,
        "func_name": "test_search_button_row_ikb",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_communicate_generated.py",
        "line": 313,
        "func_name": "test_send_callback_answer_to_api",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_communicate_generated.py",
        "line": 319,
        "func_name": "test_send_message_to_api",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_communicate_generated.py",
        "line": 325,
        "func_name": "test_set_search_follow_mode",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_communicate_generated.py",
        "line": 330,
        "func_name": "test_show_user_coordinates",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_communicate_generated.py",
        "line": 335,
        "func_name": "test_update_and_download_list_of_regions",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_compose_notifications_generated.py",
        "line": 7,
        "func_name": "test_add_tel_link",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_compose_notifications_generated.py",
        "line": 12,
        "func_name": "test_check_if_need_compose_more",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_compose_notifications_generated.py",
        "line": 17,
        "func_name": "test_compose_com_msg_on_first_post_change",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_compose_notifications_generated.py",
        "line": 22,
        "func_name": "test_compose_com_msg_on_inforg_comments",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_compose_notifications_generated.py",
        "line": 27,
        "func_name": "test_compose_com_msg_on_new_comments",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_compose_notifications_generated.py",
        "line": 32,
        "func_name": "test_compose_com_msg_on_new_topic",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_compose_notifications_generated.py",
        "line": 38,
        "func_name": "test_compose_com_msg_on_status_change",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_compose_notifications_generated.py",
        "line": 43,
        "func_name": "test_compose_com_msg_on_title_change",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_compose_notifications_generated.py",
        "line": 48,
        "func_name": "test_compose_individual_message_on_first_post_change",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_compose_notifications_generated.py",
        "line": 53,
        "func_name": "test_compose_individual_message_on_new_search",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_compose_notifications_generated.py",
        "line": 58,
        "func_name": "test_compose_new_records_from_change_log",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_compose_notifications_generated.py",
        "line": 63,
        "func_name": "test_compose_users_list_from_users",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_compose_notifications_generated.py",
        "line": 68,
        "func_name": "test_define_dist_and_dir_to_search",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_compose_notifications_generated.py",
        "line": 73,
        "func_name": "test_define_family_name",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_compose_notifications_generated.py",
        "line": 78,
        "func_name": "test_delete_ended_search_following",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_compose_notifications_generated.py",
        "line": 83,
        "func_name": "test_enrich_new_record_from_searches",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_compose_notifications_generated.py",
        "line": 88,
        "func_name": "test_enrich_new_record_with_clickable_name",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_compose_notifications_generated.py",
        "line": 93,
        "func_name": "test_enrich_new_record_with_com_message_texts",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_compose_notifications_generated.py",
        "line": 98,
        "func_name": "test_enrich_new_record_with_comments",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_compose_notifications_generated.py",
        "line": 103,
        "func_name": "test_enrich_new_record_with_emoji",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_compose_notifications_generated.py",
        "line": 109,
        "func_name": "test_enrich_new_record_with_managers",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_compose_notifications_generated.py",
        "line": 114,
        "func_name": "test_enrich_new_record_with_search_activities",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_compose_notifications_generated.py",
        "line": 119,
        "func_name": "test_enrich_users_list_with_age_periods",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_compose_notifications_generated.py",
        "line": 124,
        "func_name": "test_enrich_users_list_with_radius",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_compose_notifications_generated.py",
        "line": 129,
        "func_name": "test_generate_yandex_maps_place_link2",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_compose_notifications_generated.py",
        "line": 134,
        "func_name": "test_get_coords_from_list",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_compose_notifications_generated.py",
        "line": 139,
        "func_name": "test_get_list_of_admins_and_testers",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_compose_notifications_generated.py",
        "line": 144,
        "func_name": "test_iterate_over_all_users",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_compose_notifications_generated.py",
        "line": 149,
        "func_name": "test_main",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_compose_notifications_generated.py",
        "line": 155,
        "func_name": "test_mark_new_comments_as_processed",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_compose_notifications_generated.py",
        "line": 160,
        "func_name": "test_mark_new_record_as_processed",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_compose_notifications_generated.py",
        "line": 165,
        "func_name": "test_record_notification_statistics",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_compose_notifications_generated.py",
        "line": 170,
        "func_name": "test_sql_connect",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_connect_to_forum_generated.py",
        "line": 7,
        "func_name": "test_get_user_attributes",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_connect_to_forum_generated.py",
        "line": 12,
        "func_name": "test_get_user_data",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_connect_to_forum_generated.py",
        "line": 17,
        "func_name": "test_get_user_id",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_connect_to_forum_generated.py",
        "line": 22,
        "func_name": "test_login_into_forum",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_connect_to_forum_generated.py",
        "line": 27,
        "func_name": "test_main",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_connect_to_forum_generated.py",
        "line": 33,
        "func_name": "test_match_user_region_from_forum_to_bot",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_identify_updates_of_first_posts_generated.py",
        "line": 7,
        "func_name": "test_compose_diff_message",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_identify_updates_of_first_posts_generated.py",
        "line": 13,
        "func_name": "test_get_compressed_first_post",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_identify_updates_of_first_posts_generated.py",
        "line": 18,
        "func_name": "test_get_field_trip_details_from_text",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_identify_updates_of_first_posts_generated.py",
        "line": 23,
        "func_name": "test_get_the_list_of_coords_out_of_text",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_identify_updates_of_first_posts_generated.py",
        "line": 28,
        "func_name": "test_main",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_identify_updates_of_first_posts_generated.py",
        "line": 34,
        "func_name": "test_parse_search_folder",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_identify_updates_of_first_posts_generated.py",
        "line": 39,
        "func_name": "test_process_first_page_comparison",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_identify_updates_of_first_posts_generated.py",
        "line": 44,
        "func_name": "test_save_function_into_register",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_identify_updates_of_first_posts_generated.py",
        "line": 49,
        "func_name": "test_save_new_record_into_change_log",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_identify_updates_of_first_posts_generated.py",
        "line": 54,
        "func_name": "test_split_text_to_deleted_and_regular_parts",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_identify_updates_of_first_posts_generated.py",
        "line": 59,
        "func_name": "test_sql_connect",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_identify_updates_of_folders_generated.py",
        "line": 7,
        "func_name": "test_compare_old_and_new_folder_hash_and_give_list_of_upd_folders",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_identify_updates_of_folders_generated.py",
        "line": 13,
        "func_name": "test_decompose_folder_to_subfolders_and_searches",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_identify_updates_of_folders_generated.py",
        "line": 18,
        "func_name": "test_main",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_identify_updates_of_folders_generated.py",
        "line": 24,
        "func_name": "test_read_snapshot_from_cloud_storage",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_identify_updates_of_folders_generated.py",
        "line": 29,
        "func_name": "test_set_cloud_storage",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_identify_updates_of_folders_generated.py",
        "line": 35,
        "func_name": "test_write_snapshot_to_cloud_storage",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_identify_updates_of_topics_generated.py",
        "line": 7,
        "func_name": "test_define_start_time_of_search",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_identify_updates_of_topics_generated.py",
        "line": 12,
        "func_name": "test_get_coordinates",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_identify_updates_of_topics_generated.py",
        "line": 17,
        "func_name": "test_get_last_api_call_time_from_psql",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_identify_updates_of_topics_generated.py",
        "line": 22,
        "func_name": "test_get_the_list_of_ignored_folders",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_identify_updates_of_topics_generated.py",
        "line": 27,
        "func_name": "test_main",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_identify_updates_of_topics_generated.py",
        "line": 33,
        "func_name": "test_parse_coordinates",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_identify_updates_of_topics_generated.py",
        "line": 38,
        "func_name": "test_parse_one_comment",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_identify_updates_of_topics_generated.py",
        "line": 44,
        "func_name": "test_parse_one_folder",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_identify_updates_of_topics_generated.py",
        "line": 49,
        "func_name": "test_parse_search_profile",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_identify_updates_of_topics_generated.py",
        "line": 55,
        "func_name": "test_process_one_folder",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_identify_updates_of_topics_generated.py",
        "line": 60,
        "func_name": "test_profile_get_managers",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_identify_updates_of_topics_generated.py",
        "line": 65,
        "func_name": "test_profile_get_type_of_activity",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_identify_updates_of_topics_generated.py",
        "line": 70,
        "func_name": "test_rate_limit_for_api",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_identify_updates_of_topics_generated.py",
        "line": 75,
        "func_name": "test_read_snapshot_from_cloud_storage",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_identify_updates_of_topics_generated.py",
        "line": 80,
        "func_name": "test_read_yaml_from_cloud_storage",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_identify_updates_of_topics_generated.py",
        "line": 85,
        "func_name": "test_save_function_into_register",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_identify_updates_of_topics_generated.py",
        "line": 90,
        "func_name": "test_save_last_api_call_time_to_psql",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_identify_updates_of_topics_generated.py",
        "line": 95,
        "func_name": "test_set_cloud_storage",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_identify_updates_of_topics_generated.py",
        "line": 101,
        "func_name": "test_sql_connect",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_identify_updates_of_topics_generated.py",
        "line": 106,
        "func_name": "test_update_change_log_and_searches",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_identify_updates_of_topics_generated.py",
        "line": 112,
        "func_name": "test_update_coordinates",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_identify_updates_of_topics_generated.py",
        "line": 117,
        "func_name": "test_visibility_check",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_identify_updates_of_topics_generated.py",
        "line": 123,
        "func_name": "test_write_snapshot_to_cloud_storage",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_manage_topics_generated.py",
        "line": 7,
        "func_name": "test_main",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_manage_topics_generated.py",
        "line": 12,
        "func_name": "test_save_function_into_register",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_manage_topics_generated.py",
        "line": 17,
        "func_name": "test_save_status_for_topic",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_manage_topics_generated.py",
        "line": 22,
        "func_name": "test_save_visibility_for_topic",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_manage_topics_generated.py",
        "line": 27,
        "func_name": "test_sql_connect",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_manage_users_generated.py",
        "line": 7,
        "func_name": "test_main",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_manage_users_generated.py",
        "line": 12,
        "func_name": "test_save_default_notif_settings",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_manage_users_generated.py",
        "line": 17,
        "func_name": "test_save_new_user",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_manage_users_generated.py",
        "line": 22,
        "func_name": "test_save_onboarding_step",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_manage_users_generated.py",
        "line": 27,
        "func_name": "test_save_updated_status_for_user",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_send_debug_to_admin_generated.py",
        "line": 7,
        "func_name": "test_main",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_send_debug_to_admin_generated.py",
        "line": 13,
        "func_name": "test_send_message",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_send_notifications_generated.py",
        "line": 7,
        "func_name": "test_check_for_notifs_to_send",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_send_notifications_generated.py",
        "line": 12,
        "func_name": "test_check_for_number_of_notifs_to_send",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_send_notifications_generated.py",
        "line": 17,
        "func_name": "test_finish_time_analytics",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_send_notifications_generated.py",
        "line": 23,
        "func_name": "test_iterate_over_notifications",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_send_notifications_generated.py",
        "line": 28,
        "func_name": "test_main",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_send_notifications_generated.py",
        "line": 34,
        "func_name": "test_send_single_message",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_send_notifications_helper_2_generated.py",
        "line": 7,
        "func_name": "test_check_first_notif_to_send",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_send_notifications_helper_2_generated.py",
        "line": 12,
        "func_name": "test_check_for_notifs_to_send",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_send_notifications_helper_2_generated.py",
        "line": 17,
        "func_name": "test_finish_time_analytics",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_send_notifications_helper_2_generated.py",
        "line": 23,
        "func_name": "test_iterate_over_notifications",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_send_notifications_helper_2_generated.py",
        "line": 28,
        "func_name": "test_main",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_send_notifications_helper_2_generated.py",
        "line": 34,
        "func_name": "test_send_single_message",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_send_notifications_helper_generated.py",
        "line": 7,
        "func_name": "test_check_first_notif_to_send",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_send_notifications_helper_generated.py",
        "line": 12,
        "func_name": "test_check_for_notifs_to_send",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_send_notifications_helper_generated.py",
        "line": 17,
        "func_name": "test_finish_time_analytics",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_send_notifications_helper_generated.py",
        "line": 23,
        "func_name": "test_iterate_over_notifications",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_send_notifications_helper_generated.py",
        "line": 28,
        "func_name": "test_main",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_send_notifications_helper_generated.py",
        "line": 34,
        "func_name": "test_send_single_message",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_title_recognize_generated.py",
        "line": 7,
        "func_name": "test_get_requested_title",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_title_recognize_generated.py",
        "line": 12,
        "func_name": "test_main",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_title_recognize_generated.py",
        "line": 17,
        "func_name": "test_recognize_title",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_user_provide_info_generated.py",
        "line": 7,
        "func_name": "test_get_user_data_from_db",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_user_provide_info_generated.py",
        "line": 12,
        "func_name": "test_main",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_user_provide_info_generated.py",
        "line": 17,
        "func_name": "test_save_user_statistics_to_db",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_user_provide_info_generated.py",
        "line": 22,
        "func_name": "test_verify_telegram_data",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_user_provide_info_generated.py",
        "line": 27,
        "func_name": "test_verify_telegram_data_json",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_user_provide_info_generated.py",
        "line": 32,
        "func_name": "test_verify_telegram_data_string",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_users_activate_generated.py",
        "line": 7,
        "func_name": "test_main",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_users_activate_generated.py",
        "line": 12,
        "func_name": "test_mark_up_onboarding_status_0",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_users_activate_generated.py",
        "line": 17,
        "func_name": "test_mark_up_onboarding_status_0_2",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_users_activate_generated.py",
        "line": 22,
        "func_name": "test_mark_up_onboarding_status_10",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_users_activate_generated.py",
        "line": 27,
        "func_name": "test_mark_up_onboarding_status_10_2",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_users_activate_generated.py",
        "line": 32,
        "func_name": "test_mark_up_onboarding_status_20",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_users_activate_generated.py",
        "line": 37,
        "func_name": "test_mark_up_onboarding_status_21",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_users_activate_generated.py",
        "line": 42,
        "func_name": "test_mark_up_onboarding_status_80",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_users_activate_generated.py",
        "line": 47,
        "func_name": "test_mark_up_onboarding_status_80_have_all_settings",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_users_activate_generated.py",
        "line": 52,
        "func_name": "test_mark_up_onboarding_status_80_just_got_summaries",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_users_activate_generated.py",
        "line": 57,
        "func_name": "test_mark_up_onboarding_status_80_patch",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_users_activate_generated.py",
        "line": 62,
        "func_name": "test_mark_up_onboarding_status_80_self_deactivated",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_users_activate_generated.py",
        "line": 67,
        "func_name": "test_mark_up_onboarding_status_80_wo_dialogs",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/smoke/test_users_activate_generated.py",
        "line": 72,
        "func_name": "test_mark_up_onboarding_status_99",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/test_api_get_active_searches.py",
        "line": 8,
        "func_name": "test_main",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/test_api_get_active_searches.py",
        "line": 16,
        "func_name": "test_get_list_of_active_searches_from_db",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/test_archive_notifications.py",
        "line": 6,
        "func_name": "test_main",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/test_archive_to_bigquery.py",
        "line": 12,
        "func_name": "patch_big_query",
        "type_comments": [
            "() -> Iterator",
            "() -> Iterator"
        ],
        "samples": 2
    },
    {
        "path": "tests/test_archive_to_bigquery.py",
        "line": 21,
        "func_name": "test_main",
        "type_comments": [
            "(None) -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/test_check_first_posts_for_changes.py",
        "line": 6,
        "func_name": "test_main",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/test_check_topics_by_upd_time.py",
        "line": 6,
        "func_name": "test_main",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/test_communicate.py",
        "line": 6,
        "func_name": "test_update_and_download_list_of_regions",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/test_compose_notifications.py",
        "line": 6,
        "func_name": "test_main",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/test_connect_to_forum.py",
        "line": 11,
        "func_name": "get_user_attributes_mocked",
        "type_comments": [
            "(int) -> bs4.element.Tag"
        ],
        "samples": 1
    },
    {
        "path": "tests/test_connect_to_forum.py",
        "line": 21,
        "func_name": "test_main",
        "type_comments": [
            "(int) -> None"
        ],
        "samples": 2
    },
    {
        "path": "tests/test_identify_updates_of_first_posts.py",
        "line": 7,
        "func_name": "test_main",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/test_identify_updates_of_folders.py",
        "line": 10,
        "func_name": "test_main",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/test_identify_updates_of_topics.py",
        "line": 13,
        "func_name": "test_main",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/test_identify_updates_of_topics.py",
        "line": 20,
        "func_name": "test_get_cordinates",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/test_identify_updates_of_topics.py",
        "line": 28,
        "func_name": "test_rate_limit_for_api",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/test_identify_updates_of_topics.py",
        "line": 34,
        "func_name": "test_get_the_list_of_ignored_folders",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/test_identify_updates_of_topics.py",
        "line": 39,
        "func_name": "test_parse_one_folder",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/test_identify_updates_of_topics.py",
        "line": 40,
        "func_name": "fake_api_call",
        "type_comments": [
            "(str, Dict[str, str]) -> Dict[str, Union[Dict[str, Union[Dict[str, Union[int, str]], List[Dict[str, str]], str]], str]]"
        ],
        "samples": 2
    },
    {
        "path": "tests/test_identify_updates_of_topics.py",
        "line": 61,
        "func_name": "test_process_one_folder",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/test_identify_updates_of_topics.py",
        "line": 62,
        "func_name": "fake_api_call",
        "type_comments": [
            "(str, Dict[str, str]) -> Dict[str, Union[Dict[str, Union[Dict[str, Union[int, str]], List[Dict[str, str]], str]], str]]"
        ],
        "samples": 2
    },
    {
        "path": "tests/test_identify_updates_of_topics.py",
        "line": 82,
        "func_name": "test_main_full_scenario",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/test_identify_updates_of_topics.py",
        "line": 83,
        "func_name": "fake_api_call",
        "type_comments": [
            "(str, Dict[str, str]) -> Dict[str, Union[Dict[str, Union[Dict[str, Union[int, str]], List[Dict[str, str]], str]], str]]"
        ],
        "samples": 2
    },
    {
        "path": "tests/test_manage_topics.py",
        "line": 10,
        "func_name": "test_main",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/test_manage_users.py",
        "line": 6,
        "func_name": "test_main",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/test_run_bot.py",
        "line": 10,
        "func_name": "test_nested_async",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/test_run_bot.py",
        "line": 14,
        "func_name": "inner",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/test_send_debug_to_admin.py",
        "line": 10,
        "func_name": "test_main_positive",
        "type_comments": [
            "(unittest.mock.AsyncMock) -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/test_send_debug_to_admin.py",
        "line": 21,
        "func_name": "test_main_with_exception",
        "type_comments": [
            "(unittest.mock.AsyncMock) -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/test_send_notifications.py",
        "line": 6,
        "func_name": "test_main",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/test_send_notifications_helper.py",
        "line": 6,
        "func_name": "test_main",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/test_send_notifications_helper_2.py",
        "line": 6,
        "func_name": "test_main",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/test_title_recognize.py",
        "line": 6,
        "func_name": "test_main_positive",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/test_title_recognize.py",
        "line": 15,
        "func_name": "test_main_wrong_request",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/test_title_recognize.py",
        "line": 24,
        "func_name": "test_recognize_title",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/test_user_provide_info.py",
        "line": 6,
        "func_name": "test_main",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/test_users_activate.py",
        "line": 6,
        "func_name": "test_main",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/tools/generate_smoke_tests.py",
        "line": 98,
        "func_name": "_generate_call_signature",
        "type_comments": [
            "(function) -> str"
        ],
        "samples": 1
    },
    {
        "path": "tests/tools/generate_smoke_tests.py",
        "line": 110,
        "func_name": "_get_default_arg_value",
        "type_comments": [
            "(inspect.Parameter) -> str"
        ],
        "samples": 5
    },
    {
        "path": "tests/tools/test_smoke_generator.py",
        "line": 10,
        "func_name": "test_generate_signature",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/tools/test_smoke_generator.py",
        "line": 27,
        "func_name": "test_generate_function_args",
        "type_comments": [
            "() -> None"
        ],
        "samples": 1
    },
    {
        "path": "tests/tools/test_smoke_generator.py",
        "line": 28,
        "func_name": "example_func",
        "type_comments": [
            "(str, int, unittest.mock.MagicMock, datetime.date, datetime.datetime) -> None"
        ],
        "samples": 1
    }
]